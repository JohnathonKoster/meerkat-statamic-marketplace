{"version":3,"sources":["meerkat.js","urls.js","api.js","publisher.js","app.js","dossier.js","dossier_cell.js","add_action.js","stream_cell.js","bulkactions.js","str_limit.js","DossierTable.js","MeerkatStreamListing.js","ConversationView.js"],"names":[],"mappingstBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhn/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"meerkat.js","sourcesContent":["Meerkat = {\n\n    /**\n     * Sets the bulk actions template.\n     *\n     * @param value\n     * @returns {Meerkat}\n     */\n    setBulkActionsTemplate: function (value) {\n        this.bulk_actions_template = value;\n        return this;\n    },\n\n    getConversationLabel: function (collection) {\n        return '';\n    },\n\n    /**\n     * Gets the bulk actions template.\n     *\n     * @returns {string}\n     */\n    getBulkActionsTempalte: function() {\n        return this.bulk_actions_template;\n    },\n\n    setAvatarTemplate: function(value) {\n        this.avatar_tempalte = value;\n        return this;\n    },\n\n    getAvatarTemplate: function() {\n        return this.avatar_tempalte;\n    },\n\n    /**\n     * Sets the Dossier table template.\n     *\n     * @param value\n     * @returns {Meerkat}\n     */\n    setDossierTemplate: function (value) {\n        this.dossier_template = value;\n        return this;\n    },\n\n    /**\n     * Gets the Dossier table template.\n     *\n     * @returns {string}\n     */\n    getDossierTemplate: function () {\n        return this.dossier_template ? this.dossier_template : '';\n    },\n\n    /**\n     * Sets the Dossier cell template.\n     *\n     * @param value\n     * @returns {Meerkat}\n     */\n    setDossierCellTemplate: function (value) {\n        this.dossier_cell_template = value;\n        return this;\n    },\n\n    /**\n     * Gets the Dossier cell template.\n     *\n     * @returns {string}\n     */\n    getDossierCellTemplate: function () {\n        return this.dossier_cell_template ? this.dossier_cell_template : '';\n    },\n\n    /**\n     * Sets the Meerkat cell template.\n     *\n     * @param value\n     * @returns {Meerkat}\n     */\n    setMeerkatCellTemplate: function(value) {\n        this.meerkat_cell_template = value;\n        return this;\n    },\n\n    /**\n     *Gets the Meerkat cell template.\n     *\n     * @returns {string}\n     */\n    getMeerkatCellTemplate: function() {\n        return this.meerkat_cell_template ? this.meerkat_cell_template : '';\n    },\n\n    /**\n     * Sets the Meerkat add action partial template.\n     *\n     * @param value\n     * @returns {Meerkat}\n     */\n    setMeerkatAddActionPartialTemplate: function(value) {\n        this.meerkat_add_action_template = value;\n        return this;\n    },\n\n    /**\n     * Gets the Meerkat add action partial.\n     *\n     * @returns {string}\n     */\n    getMeerkatAddActionPartial: function() {\n      return this.meerkat_add_action_template ? this.meerkat_add_action_template : '';\n    },\n\n    compareVersionString: function(v1, comparator, v2) {\n        \"use strict\";\n        var comparator = comparator == '=' ? '==' : comparator;\n        if(['==','===','<','<=','>','>=','!=','!=='].indexOf(comparator) == -1) {\n            throw new Error('Invalid comparator. ' + comparator);\n        }\n        var v1parts = v1.split('.'), v2parts = v2.split('.');\n        var maxLen = Math.max(v1parts.length, v2parts.length);\n        var part1, part2;\n        var cmp = 0;\n        for(var i = 0; i < maxLen && !cmp; i++) {\n            part1 = parseInt(v1parts[i], 10) || 0;\n            part2 = parseInt(v2parts[i], 10) || 0;\n            if(part1 < part2)\n                cmp = 1;\n            if(part1 > part2)\n                cmp = -1;\n        }\n        return eval('0' + comparator + cmp);\n    },\n\n    compareStatamicVersion: function(comparator, desiredVersion) {\n        return Meerkat.compareVersionString(Statamic.version, comparator, desiredVersion);\n    }\n\n};\n","/**\n * Executes a given callback when the user visits a given CP URL.\n *\n * @param url\n * @param callback\n */\nfunction forUrl(url, callback) {\n    if (Statamic.urlPath == Statamic.cpRoot + \"/\" + url) {\n        return callback();\n    }\n\n    return null;\n}\n\nfunction whenPublisher(callback) {\n    if (typeof Statamic.Publish !== 'undefined' && location.pathname.toLowerCase().endsWith('create') == false && location.pathname.toLowerCase().endsWith('create/') == false) {\n        return callback();\n    }\n\n    return null;\n}\n\n/**\n * Returns a URL relative to the origin.\n *\n * @param relative\n * @returns {string}\n */\nfunction originUrl(relative) {\n    return window.location.origin + \"/\" + relative;\n}\n","Meerkat.API = {\n\n    /**\n     * The comment count API URL.\n     */\n    getCommentCount: originUrl('!/Meerkat/api-comment-count'),\n\n    /**\n     * The all comments API URL.\n     */\n    getAllComments: originUrl('!/Meerkat/api-comments'),\n\n    /**\n     * The Meerkat addon URL.\n     */\n    addonPath: originUrl(Statamic.cpRoot + '/addons/meerkat'),\n\n    /**\n     * The name of the Meerkat form.\n     */\n    formName: 'meerkat'\n\n};","Meerkat.Publisher = {\n\n    publisherStream: '',\n\n    setupNavigation: function () {\n          var publisherNavigation = $('<ul class=\"nav nav-tabs\" data-meerkat-publisher=\"tab-navigation\"><li role=\"presentation\" class=\"active\" data-meerkat-publisher=\"tab:content\"><a href=\"#\" data-meerkat-publisher=\"toggle:content\">' \n            + translate('addons.Meerkat::comments.content') + '</a></li><li role=\"presentation\" data-meerkat-publisher=\"tab:comments\"><a href=\"#\" data-meerkat-publisher=\"toggle:comments\">'\n            + translate('addons.Meerkat::comments.comments') + '</a></li></ul>');\n          $('[data-meerkat-publisher=\"fields-main\"]').prepend(publisherNavigation);\n\n          $('[data-meerkat-publisher=\"toggle:content\"]').on('click', function (e) {\n              $('[data-meerkat-publisher=\"tab:comments\"]').removeClass('active');\n              $('[data-meerkat-publisher=\"tab:content\"]').addClass('active');\n\n              $('[data-meerkat-publisher=\"comments-main\"]').hide();\n              $('[data-meerkat-publisher=\"publish-fields\"]').show();\n          });\n\n          $('[data-meerkat-publisher=\"toggle:comments\"]').on('click', function (e) {\n              $('[data-meerkat-publisher=\"tab:comments\"]').addClass('active');\n              $('[data-meerkat-publisher=\"tab:content\"]').removeClass('active');\n\n              $('[data-meerkat-publisher=\"publish-fields\"]').hide();\n              $('[data-meerkat-publisher=\"comments-main\"]').show();\n          });\n    },\n\n    setupSecondaryCard: function () {\n        var secondCard = '<div class=\"card\" data-meerkat-publisher=\"comments-main\"></div>';\n        $('[data-meerkat-publisher=\"fields-main\"]').append(secondCard);\n\n        $('[data-meerkat-publisher=\"comments-main\"]').append($(Meerkat.Publisher.publisherStream));\n\n        $('[data-meerkat-publisher=\"comments-main\"]').hide();\n    },\n\n    setupInstance: function () {\n        var vm = new Vue({\n            'el': '#meerkat-publisher-stream'\n        });\n    },\n\n    setup: function () {\n        if ($('#publish-fields').length) {\n            $('#publish-fields').attr('data-meerkat-publisher', 'fields-main');\n            $('#publish-fields .card:first').attr('data-meerkat-publisher', 'publish-fields');\n            Meerkat.Publisher.setupSecondaryCard();\n            Meerkat.Publisher.setupNavigation();\n            Meerkat.Publisher.setupInstance();\n        }\n    }\n\n};","/**\n * This will override the response count for the Meerkat form.\n */\nforUrl('forms', function () {\n    var meerkatCardHref = window.location.href + \"/\" + Meerkat.API.formName;\n    var meerkatCard = document.querySelectorAll(\"a[href='\" + meerkatCardHref + \"']\");\n\n\n    if (Meerkat.compareStatamicVersion('<', '2.7.0')) {        \n        if (meerkatCard.length > 0) {\n            meerkatCard = meerkatCard[0];\n            meerkatCard.setAttribute(\"href\", Meerkat.API.addonPath);\n            var cardMajor = meerkatCard.getElementsByTagName(\"span\")[0];\n    \n            fetch(Meerkat.API.getCommentCount, {\n                method: 'GET'\n            }).then(function (response) {\n                return response.json();\n            }).then(function (data) {\n                cardMajor.innerText = data.count;\n            }).catch(function (err) {\n                cardMajor.innerText = 0;\n            });\n        }\n    } else {\n        if (meerkatCard.length > 0) {\n            var cardInner = $(meerkatCard[0]).parent().children().first('div.stat')[0];\n            meerkatCard[0].setAttribute('href', Meerkat.API.addonPath);\n\n            fetch(Meerkat.API.getCommentCount, {\n                metod: 'GET'\n            }).then(function (response) {\n                return response.json();\n            }).then(function (data) {\n                cardInner.innerHTML = '<span class=\"icon icon-documents\"></span> ' + data.count;\n            }).catch(function (err) {\n                cardInner.innerHTML = '<span class=\"icon icon-documents\"></span> 0';\n            });\n        }\n    }\n});\n\n/**\n * Redirect the user to the Meerkat addon path.\n */\nforUrl('forms/' + Meerkat.API.formName, function () {\n    window.location = Meerkat.API.addonPath;\n});\n\n(function () {\n    $(document).ready(function () {\n        whenPublisher(function () {\n            /** Setup the publisher experience. */\n            Meerkat.Publisher.setup();\n        });\n    });\n})();","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setDossierTemplate(\"\\n<div class=\\\"meerkat-bulk-action-wrapper pull-left\\\" v-if=\\\"showBulkActions\\\">\\n    <partial name=\\\"bulkActions\\\"></partial>\\n</div>\\n\\n<table class=\\\"dossier meerkat-comments-table table-striped\\\" v-if=\\\"sizes.md || sizes.lg\\\">\\n    <thead v-if=\\\"hasHeaders\\\">\\n        <tr>\\n            <th class=\\\"checkbox-col\\\" v-if=\\\"hasCheckboxes\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"checkbox-all\\\" :checked=\\\"allItemsChecked\\\" @click=\\\"checkAllItems\\\" />\\n                <label for=\\\"checkbox-all\\\"></label>\\n            </th>\\n\\n            <th v-for=\\\"column in columns\\\"\\n                @click=\\\"sortBy(column)\\\"\\n                class=\\\"column-sortable\\\"\\n                :class=\\\"['column-' + column.label, {'active': sortCol === column.field} ]\\\"\\n            >\\n                <template v-if=\\\"column.translation\\\">{{ column.translation }}</template>\\n                <template v-else>{{ translate('cp.'+column.label) }}</template>\\n                <i v-if=\\\"sortCol === column.field\\\"\\n                    class=\\\"icon icon-chevron-{{ (sortOrders[column.field] > 0) ? 'up' : 'down' }}\\\"></i>\\n            </th>\\n        </tr>\\n    </thead>\\n    <tbody data-meerkat-type=\\\"comment\\\" v-el:tbody v-for=\\\"item in items | filterBy computedSearch | caseInsensitiveOrderBy computedSortCol computedSortOrder\\\">\\n        <tr\\n            data-meerkat-type=\\\"comment\\\"\\n            data-meerkat-comment-id=\\\"{{ item['id'] }}\\\" data-meerkat-comment-published=\\\"{{ item['published'].toString() }}\\\"\\n            data-meerkat-comment-spam=\\\"{{ item['spam'].toString() }}\\\">\\n        <td colspan=\\\"3\\\">\\n        <div class=\\\"comment-header-options\\\" v-if=\\\"item['published']\\\"><a href=\\\"{{ item['in_response_to_url'] }}#comment-{{ item['id'] }}\\\" target=\\\"_blank\\\" title=\\\"{{ translate('addons.Meerkat::actions.view_post_desc') }}\\\">{{ translate('addons.Meerkat::actions.view_post') }}</a></div>\\n        <div class=\\\"float-left\\\"><a name=\\\"meerkat-comment-{{ item['id'] }}\\\"></a><span class=\\\"icon icon-flag\\\" v-if=\\\"item['published'] === false\\\"></span> {{{ item['in_response_string'] }}}</div>\\n        </td>\\n        </tr>\\n        <tr data-meerkat-type=\\\"comment\\\"\\n            data-meerkat-comment-id=\\\"{{ item['id'] }}\\\" data-meerkat-comment-published=\\\"{{ item['published'].toString() }}\\\"\\n            data-meerkat-comment-spam=\\\"{{ item['spam'].toString() }}\\\">\\n\\n            <td class=\\\"checkbox-col\\\" v-if=\\\"hasCheckboxes && !reordering\\\">\\n                <input type=\\\"checkbox\\\" :id=\\\"'checkbox-' + $index\\\" :checked=\\\"item.checked\\\" @change=\\\"toggle(item)\\\" />\\n                <label :for=\\\"'checkbox-' + $index\\\"></label>\\n            </td>\\n\\n            <td class=\\\"checkbox-col\\\" v-if=\\\"reordering\\\">\\n                <div class=\\\"drag-handle\\\">\\n                    <i class=\\\"icon icon-menu\\\"></i>\\n                </div>\\n            </td>\\n\\n            <td v-for=\\\"column in columns\\\" class=\\\"cell-{{ column.field }}\\\">\\n                <partial name=\\\"cell\\\"></partial>\\n            </td>\\n        </tr>\\n    </tbody>\\n</table>\\n<div v-if=\\\"sizes.sm || sizes.xs\\\" class=\\\"meerkat-mobile-table\\\">\\n    <div v-for=\\\"item in items | filterBy computedSearch | caseInsensitiveOrderBy computedSortCol computedSortOrder\\\">\\n        <div data-meerkat-mobile=\\\"wrap\\\" data-meerkat-type=\\\"comment\\\"\\n            data-meerkat-comment-id=\\\"{{ item['id'] }}\\\" data-meerkat-comment-published=\\\"{{ item['published'].toString() }}\\\"\\n            data-meerkat-comment-spam=\\\"{{ item['spam'].toString() }}\\\">\\n            <partial name=\\\"cell\\\"></partial>                        \\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"meerkat-pagination-wrapper\\\">\\n    <ul class=\\\"pagination meerkat-pagination\\\">\\n        <li v-if=\\\"$parent.pagination.prevPage\\\">\\n            <a href=\\\"\\\" @click.prevent=\\\"call('previousPage')\\\" aria-label=\\\"{{ translate('addons.Meerkat::pagination.previous') }}\\\"><span>&laquo;</span></a>\\n        </li>\\n        <li v-for=\\\"page in $parent.pages\\\">\\n            <a href=\\\"\\\" @click.prevent=\\\"call('goToPage', page.page)\\\" v-bind:class=\\\"{ 'active': page.active }\\\" :disabled=\\\"page.page === null\\\">{{ page.name }}</a>\\n        </li>\\n        <li v-if=\\\"$parent.pagination.nextPage\\\">\\n            <a href=\\\"\\\" @click.prevent=\\\"call('nextPage')\\\" aria-label=\\\"{{ translate('addons.Meerkat::pagination.next') }}\\\"><span>&raquo;</span></a>\\n        </li>\\n    </ul>\\n</div>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=dossier.js.map\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setDossierCellTemplate(\"\\n    <a v-if=\\\"$index === 0\\\" :href=\\\"item.edit_url\\\">\\n        <span class=\\\"status status-{{ (item.published) ? 'live' : 'hidden' }}\\\"\\n              :title=\\\"(item.published) ? translate('cp.published') : translate('cp.draft')\\\"\\n        ></span>\\n        {{ item[column.label] }}\\n    </a>\\n    <template v-else>\\n        {{ item[column.label] }}\\n    </template>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=dossier_cell.js.map\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setMeerkatAddActionPartialTemplate(\"\\n    <li v-if=\\\"item['published'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('approveComment', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.approve_desc') }}\\\"><span class=\\\"icon icon-check\\\"></span> {{ translate('addons.Meerkat::actions.approve') }}</a></li>\\n    <li v-if=\\\"item['published'] === true\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('unApproveComment', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.unapprove_desc') }}\\\">{{ translate('addons.Meerkat::actions.unapprove') }}</a></li>\\n    <li><a href=\\\"#\\\" @click.prevent=\\\"call('replyToComment', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.reply_desc') }}\\\"><span class=\\\"icon icon-reply\\\"></span> {{ translate('addons.Meerkat::actions.reply') }}</a></li>\\n    <li><a href=\\\"#\\\" @click.prevent=\\\"call('editComment', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.edit_desc') }}\\\"><span class=\\\"icon icon-edit\\\"></span> {{ translate('addons.Meerkat::actions.edit') }}</a></li>\\n    <li v-if=\\\"item['spam'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('markItemAsSpam', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.spam_desc') }}\\\"><span class=\\\"icon icon-shield\\\"></span> {{ translate('addons.Meerkat::actions.spam') }}</a></li>\\n    <li v-if=\\\"item['spam'] === true\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('markItemAsNotSpam', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.not_spam_desc') }}\\\"><span class=\\\"icon icon-shield\\\"></span> {{ translate('addons.Meerkat::actions.not_spam') }}</a></li>\\n    <li><a href=\\\"#\\\" @click.prevent=\\\"call('deleteItem', item.id)\\\" title=\\\"{{ translate('addons.Meerkat::actions.delete_desc') }}\\\"><span class=\\\"icon icon-trash\\\"></span> {{ translate('addons.Meerkat::actions.delete') }}</a></li>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=add_action.js.map\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setMeerkatCellTemplate(\"\\n<div v-if=\\\"sizes.md || sizes.lg\\\">\\n<div class=\\\"media\\\" v-if=\\\"$index === 0\\\">\\n    <partial name=\\\"avatar\\\"></partial>\\n    <div class=\\\"media-body\\\"> <h4 class=\\\"media-heading\\\">{{ item['name'] }}</h4>\\n        <span class=\\\"icon icon-mail\\\"></span> <a href=\\\"mailto:{{ item['email'] }}\\\">{{ item['email'] }}</a><br />\\n        \\n        <div v-if=\\\"item['url']\\\"><a href=\\\"{{ item['url'] }}\\\" target=\\\"_blank\\\"><span class=\\\"icon icon-globe\\\"></span> {{ item['url'] }}</a></div>\\n    </div>\\n</div>\\n<div v-if=\\\"$index === 1\\\">\\n    <div data-meerkat-comment=\\\"response\\\" v-if=\\\"item['is_reply']\\\">\\n    {{ translate('addons.Meerkat::comments.in_reply_to_simple') }} <a @click.prevent=\\\"call('openConversation', item['parent_comment_id'])\\\">{{ item['parent_comment_name'] }}</a>\\n    </div>\\n\\n    <div data-meerkat-comment=\\\"content\\\" v-if=\\\"item['editing'] === false\\\">\\n    {{{ item['comment'] }}}\\n    </div>\\n    <div v-if=\\\"item['editing'] === true\\\">\\n        <div class=\\\"markdown-fieldtype\\\">\\n            <markdown-fieldtype :data.sync=\\\"item['original_markdown']\\\"></markdown-fieldtype>\\n        </div>\\n        <ul class=\\\"list-inline\\\" data-meerkat-has=\\\"actions\\\">\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('saveItemEdits', item.id)\\\"><span class=\\\"icon icon-check\\\"></span> {{ translate('addons.Meerkat::actions.save') }}</a></li>\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelItemEdit', item.id)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n        <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.saving') }}</li>\\n        </ul>\\n    </div>\\n    <div v-if=\\\"item['writing_reply'] === true\\\">\\n        <div class=\\\"markdown-fieldtype\\\">\\n            <markdown-fieldtype :data.sync=\\\"item['new_reply']\\\"></markdown-fieldtype>\\n        </div>\\n        <ul class=\\\"list-inline\\\" data-meerkat-has=\\\"actions\\\">\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('createNewReply', item.id)\\\"><span class=\\\"icon icon-reply\\\"></span> {{ translate('addons.Meerkat::actions.reply') }}</a></li>\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelPostReply', item.id)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n        <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.replying') }}</li>\\n        </ul>\\n    </div>\\n    <div data-meerkat-type=\\\"comment\\\" data-meerkat-has=\\\"actions\\\"\\n         v-if=\\\"hasActions\\\">\\n    <ul class=\\\"list-inline\\\" v-if=\\\"item['editing'] === false && item['writing_reply'] === false\\\">\\n    <partial name=\\\"actions\\\"></partial>\\n    </ul>\\n    </div>\\n</div>\\n<div v-if=\\\"$index === 3\\\">\\n    <a href=\\\"/cp/collections/entries{{ item['in_response_to_edit_url'] }}\\\">{{ item['in_response_to'] }}</a><br />\\n    <div v-if=\\\"item['published']\\\">\\n        <small><a href=\\\"{{ item['in_response_to_url'] }}#comment-{{ item['id'] }}\\\" target=\\\"_blank\\\" title=\\\"{{ translate('addons.Meerkat::actions.view_post_desc') }}\\\">{{ translate('addons.Meerkat::actions.view_post') }}</a></small><br />\\n    </div>\\n    <span class=\\\"label label-default\\\"><span class=\\\"icon icon-chat\\\"></span> {{ item['comment_count'] }}</span>\\n</div>\\n</div>\\n<div v-if=\\\"sizes.sm || sizes.xs\\\">\\n    <div class=\\\"meerkat-mobile-card\\\" id=\\\"meerkat-mobile-comment-card-{{ item['id'] }}\\\" v-bind:class=\\\"{ 'meerkat-conversation-intended-comment': ($parent.$parent.intendedComment != null && $parent.$parent.intendedComment == item['id']) }\\\">\\n        <div class=\\\"meerkat-mobile-card-header\\\" v-bind:class=\\\"{ 'is-selected': item.checked }\\\">\\n            <div class=\\\"meerkat-mobile-card-avatar\\\">\\n                <partial name=\\\"avatar\\\"></partial>\\n            </div>\\n            <a class=\\\"meerkat-mobile-card-indicator\\\" v-bind:class=\\\"{ 'checked': item.checked }\\\" @click.prevent=\\\"$parent.toggle(item)\\\"></a>\\n            <h5>\\n                {{ item['name'] }}\\n                <span v-if=\\\"item['is_reply']\\\">\\n                    <span v-if=\\\"$parent.$parent.loadStreamFor !== null\\\">\\n                        - {{ translate('addons.Meerkat::comments.in_reply_to_simple') }} {{ item['parent_comment_name'] }}\\n                    </span>\\n                    <span v-else>\\n                        - {{ translate('addons.Meerkat::comments.in_reply_to_simple') }} <a @click.prevent=\\\"call('openConversation', item['parent_comment_id'])\\\">{{ item['parent_comment_name'] }}\\n                        <span v-if=\\\"item['conversation_participants'].length - 2 > 0\\\">( +{{ item['conversation_participants'].length - 2 }} {{ Meerkat.getConversationLabel([]) }}\\n                            <span v-if=\\\"item['conversation_participants'].length - 2 == 1\\\">{{ translate('addons.Meerkat::comments.conversation_other_singular') }}</span>\\n                            <span v-if=\\\"item['conversation_participants'].length - 2 > 1\\\">{{ translate('addons.Meerkat::comments.conversation_other_plural') }}</span>\\n                        )</span></a>\\n                    </span>\\n                </span>\\n            </h5>\\n            <h6><a href=\\\"mailto:{{ item['email'] }}\\\">{{ item['email'] }}</a></h6>\\n        </div>\\n        <div class=\\\"meerkat-mobile-card-content\\\">\\n            <div class=\\\"comment-header-options meerkat-mobile-card-reply-to\\\">\\n                {{{ item['in_response_string'] }}}\\n            </div>\\n\\n            <div data-meerkat-comment=\\\"content\\\" v-if=\\\"item['editing'] === false\\\">\\n            {{{ item['comment'] }}}\\n            </div>\\n            <div v-if=\\\"item['editing'] === true\\\">\\n                <div class=\\\"markdown-fieldtype\\\">\\n                    <markdown-fieldtype :data.sync=\\\"item['original_markdown']\\\"></markdown-fieldtype>\\n                </div>\\n                <ul class=\\\"list-inline meerkat-mobile-edit-actions\\\" data-meerkat-has=\\\"actions\\\">\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('saveItemEdits', item.id)\\\"><span class=\\\"icon icon-check\\\"></span> {{ translate('addons.Meerkat::actions.save') }}</a></li>\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelItemEdit', item.id)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n                <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.saving') }}</li>\\n                </ul>\\n            </div>\\n            <div v-if=\\\"item['writing_reply'] === true\\\">\\n                <div class=\\\"markdown-fieldtype\\\">\\n                    <markdown-fieldtype :data.sync=\\\"item['new_reply']\\\"></markdown-fieldtype>\\n                </div>\\n                <ul class=\\\"list-inline meerkat-mobile-edit-actions\\\" data-meerkat-has=\\\"actions\\\">\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('createNewReply', item.id)\\\"><span class=\\\"icon icon-reply\\\"></span> {{ translate('addons.Meerkat::actions.reply') }}</a></li>\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelPostReply', item.id)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n                <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.replying') }}</li>\\n                </ul>\\n            </div>\\n        </div>\\n        <div class=\\\"meerkat-mobile-card-footer\\\" v-if=\\\"item['editing'] === false && item['writing_reply'] === false\\\">\\n            <div data-meerkat-type=\\\"comment\\\" data-meerkat-has=\\\"actions\\\"\\n                    v-if=\\\"hasActions\\\">\\n                <ul class=\\\"list-inline meerkat-mobile-card-actions\\\" v-if=\\\"item['editing'] === false && item['writing_reply'] === false\\\">\\n                <partial name=\\\"actions\\\"></partial>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=stream_cell.js.map\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setBulkActionsTemplate(\"\\n<select class=\\\"meerkat-bulk-actions form-control\\\" v-model=\\\"bulkAction\\\">\\n    <option value=\\\"delete\\\" selected>{{ translate_choice('addons.Meerkat::actions.bulk_delete', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"approve\\\">{{ translate_choice('addons.Meerkat::actions.bulk_approve', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"unapprove\\\">{{ translate_choice('addons.Meerkat::actions.bulk_unapprove', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"spam\\\">{{ translate_choice('addons.Meerkat::actions.bulk_mark_spam', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"notspam\\\">{{ translate_choice('addons.Meerkat::actions.bulk_mark_not_spam', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n</select>\\n<a href=\\\"#\\\" @click.prevent=\\\"call('applyBulkActions', bulkAction)\\\" class=\\\"btn btn-default\\\" v-if=\\\"$parent.applyingBulkActions == false\\\"><span class=\\\"icon icon-tools\\\"></span> {{ translate('addons.Meerkat::actions.apply') }}</a>\\n<span v-if=\\\"$parent.applyingBulkActions == true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.applying') }}</span>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=bulkactions.js.map\n","Vue.filter('strlimit', function(value, length) {\n    if (value.toString().length <= length) {\n        return value;\n    }\n\n    return value.toString().substring(0, length) + '...';\n});","window.DossierTable = DossierTable = Vue.component('DossierTable', {\n\n    template: Meerkat.getDossierTemplate(),\n\n    props: ['options', 'keyword'],\n\n    data: function () {\n        return {\n            items: [],\n            columns: [],\n            sortCol: this.options.sort || null,\n            sortOrder: this.options.sortOrder || 'asc',\n            sortOrders: {},\n            reordering: false,\n            sizes: {\n                xs: false,\n                sm: false,\n                md: false,\n                lg: false\n            },\n            shouldOverrideToMobile: false        }\n    },\n\n    partials: {\n        // The default cell markup will be a link to the edit_url with a status symbol\n        // if it's the first cell. Remaining cells just get the label.\n        cell: Meerkat.getDossierCellTemplate()\n    },\n\n    computed: {\n\n        hasCheckboxes: function () {\n            if (this.options.checkboxes === false) {\n                return false;\n            }\n\n            return true;\n        },\n\n        itemsAreChecked: function () {\n            return this.checkedItems.length > 0;\n        },\n\n        hasSearch: function () {\n            if (this.options.search === false) {\n                return false;\n            }\n\n            return true;\n        },\n\n        hasHeaders: function () {\n            if (this.options.headers === false) {\n                return false;\n            }\n\n            return true;\n        },\n\n        hasActions: function () {\n            return this.options.partials.actions !== undefined\n                && this.options.partials.actions !== '';\n        },\n\n        showBulkActions: function () {\n            return (this.hasItems && this.hasCheckboxes && this.itemsAreChecked && !this.reordering);\n        },\n\n        hasItems: function () {\n            return this.$parent.hasItems;\n        },\n\n        reorderable: function () {\n            return this.options.reorderable;\n        },\n\n        checkedItems: function () {\n            return this.items.filter(function (item) {\n                return item.checked;\n            }).map(function (item) {\n                return item.id;\n            });\n        },\n\n        allItemsChecked: function () {\n            return this.items.length === this.checkedItems.length;\n        },\n\n        computedSearch: function () {\n            if (this.reordering) {\n                return null;\n            }\n\n            return this.keyword;\n        },\n\n        computedSortCol: function () {\n            if (this.reordering) {\n                return false;\n            }\n\n            return this.sortCol;\n        },\n\n        computedSortOrder: function () {\n            if (this.reordering) {\n                return false;\n            }\n\n            return this.sortOrders[this.sortCol];\n        }\n    },\n\n    beforeCompile: function () {\n        var self = this;\n\n        _.each(self.options.partials, function (str, name) {\n            self.$options.partials[name] = str;\n        });\n    },\n\n    ready: function () {\n        this.items = this.$parent.items;\n        this.columns = this.$parent.columns;\n\n        this.setColumns();\n        this.setSortOrders();\n\n        this.sortCol = this.options.sort || this.columns[0].field;\n\n        if (typeof this.$parent !== 'undefined' && this.$parent !== null) {\n            if (typeof this.$parent.passMobileOverride !== 'undefined') {\n                if (this.$parent.passMobileOverride) {\n                    this.shouldOverrideToMobile = true;\n                }\n            }\n        }\n\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    },\n\n    beforeDestroy: function () {\n        window.removeEventListener('resize', this.handleResize);\n    },\n\n    methods: {\n\n        setIntended: function (intended) {\n            this.intendedComment = intended;\n        },\n\n        handleResize: function () {\n\n            if (this.shouldOverrideToMobile) {\n                this.sizes.xs = true;\n                this.sizes.sm = false;\n                this.sizes.md = false;\n                this.sizes.lg = false;\n                return;\n            }\n\n            var width = window.innerWidth;\n\n            if (width <= 767) {\n                this.sizes.xs = true;\n                this.sizes.sm = false;\n                this.sizes.md = false;\n                this.sizes.lg = false;\n                return;\n            }\n            if (width >= 768 && width <= 991) {\n                this.sizes.xs = false;\n                this.sizes.sm = true;\n                this.sizes.md = false;\n                this.sizes.lg = false;\n                return;\n            }\n            if (width >= 992 && width <= 1199) {\n                this.sizes.xs = false;\n                this.sizes.sm = false;\n                this.sizes.md = true;\n                this.sizes.lg = false;\n                return;\n            }\n            if (width >= 1200) {\n                this.sizes.xs = false;\n                this.sizes.sm = false;\n                this.sizes.md = false;\n                this.sizes.lg = true;\n                return;\n            }\n        },\n        \n        registerPartials: function () {\n            var self = this;\n\n            _.each(self.options.partials, function (str, name) {\n                Vue.partial(name, str);\n            });\n        },\n\n        setColumns: function () {\n            var columns = [];\n            _.each(this.columns, function (column) {\n                if (typeof column === 'object') {\n                    columns.push({label: column.label, field: column.field, translation: column.translation});\n                } else {\n                    columns.push({label: column, field: column});\n                }\n            });\n            this.columns = columns;\n        },\n\n        setSortOrders: function () {\n            var sortOrders = {};\n            _.each(this.columns, function (col) {\n                sortOrders[col.field] = 1;\n            });\n\n            // Apply the initial sort order\n            sortOrders[this.sortCol] = (this.sortOrder === 'asc') ? 1 : -1;\n\n            this.sortOrders = sortOrders;\n        },\n\n        sortBy: function (col) {\n            if (this.sortCol === col.field) {\n                this.sortOrders[col.field] = this.sortOrders[col.field] * -1;\n            }\n\n            this.sortCol = col.field;\n        },\n\n        checkAllItems: function () {\n            var status = !this.allItemsChecked;\n\n            _.each(this.items, function (item) {\n                item.checked = status;\n            });\n        },\n\n        toggle: function (item) {\n            item.checked = !item.checked;\n        },\n\n        enableReorder: function () {\n            var self = this;\n\n            self.reordering = true;\n\n            $(this.$els.tbody).sortable({\n                axis: 'y',\n                revert: 175,\n                placeholder: 'placeholder',\n                handle: '.drag-handle',\n                forcePlaceholderSize: true,\n\n                start: function (e, ui) {\n                    ui.item.data('start', ui.item.index())\n                },\n\n                update: function (e, ui) {\n                    var start = ui.item.data('start'),\n                        end = ui.item.index();\n\n                    self.items.splice(end, 0, self.items.splice(start, 1)[0]);\n                }\n\n            });\n        },\n\n        disableReorder: function () {\n            this.reordering = false;\n            $(this.$els.tbody).sortable('destroy');\n        },\n\n        saveOrder: function () {\n            this.$parent.saveOrder();\n        },\n\n        /**\n         * Dynamically call a method on the parent component\n         *\n         * Eg. `call('foo', 'bar', 'baz')` would be the equivalent\n         * of doing `this.$parent.foo('bar', 'baz')`\n         */\n        call: function (method) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            this.$parent[method].apply(this, args);\n        }\n    },\n\n    events: {\n        'reordering.start': function () {\n            this.enableReorder();\n        },\n        'reordering.saved': function () {\n            this.reordering = false;\n        },\n        'reordering.stop': function () {\n            this.disableReorder();\n        }\n    }\n});","window.MeerkatStreamListing = MeerkatStreamListing = Vue.component('meerkat-stream-listing', {\n\n    props: [\n        'get',\n        'delete',\n        'spam',\n        'notspam',\n        'approve',\n        'unapprove',\n        'update',\n        'create',\n        'checkspam',\n        'perpage',\n        'ifilter',\n        'hidemanagement',\n        'autoload',\n        'getcounts'\n    ],\n\n    data: function () {\n        return {\n            cpNav: null,\n            loading: true,\n            checkingSpam: false,\n            items: [],\n            streamFilter: null,\n            columns: [],\n            search: null,\n            metrics: [],\n            reordering: false,\n            filter: 'all',\n            hideManagement: this.hidemanagement,\n            ajax: {\n                get: this.get,\n                delete: this.delete,\n                spam: this.spam,\n                notspam: this.notspam,\n                approve: this.approve,\n                unapprove: this.unapprove,\n                update: this.update,\n                create: this.create,\n                checkSpam: this.checkspam,\n                getcounts: this.getcounts\n            },\n            pagination: {\n                nextPage: null,\n                prevPage: null,\n                from: null,\n                to: null,\n                lastPage: null,\n                page: null\n            },\n            tableOptions: {\n                checkboxes: true,\n                sort: 'datestamp',\n                sortOrder: 'desc',\n                showBulkOptions: true,\n                paginate: true,\n                currentPage: 1,\n                perPage: this.perpage,\n                partials: {\n                    cell: Meerkat.getMeerkatCellTemplate()\n                }\n            },\n            instanceChanges: {\n                commentEdits: [],\n                commentRemovals: [],\n                commentReplies: [],\n                commentMarkedAsSpam: [],\n                commentMarkedAsNotSpam: [],\n                commentApprovals: [],\n                commentUnApprovals: []\n            },\n            bulkAction: 'delete',\n            applyingBulkActions: false,\n            avatarDriver: Meerkat.config.avatar_driver,\n            passMobileOverride: false,\n            loadStreamFor: null,\n            intendedComment: null\n        }\n    },\n\n    computed: {\n\n        isPaginated: function() {\n            return this.tableOptions.paginate;\n        },\n\n        pages: function() {\n            var maxButtons = 5;\n            var pages = [];\n            var halfWay = Math.ceil(maxButtons / 2);\n            var position;\n\n            if (this.pagination.page <= halfWay) {\n                position = 'start';\n            } else if (this.pagination.lastPage - halfWay < this.pagination.page) {\n                position = 'end';\n            } else {\n                position = 'middle';\n            }\n\n            var ellipsesNeeded = maxButtons < this.pagination.lastPage;\n            var i = 1;\n\n            while (i <= this.pagination.lastPage && i <= maxButtons) {\n                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));\n                var closingEllipsesNeeded = (i === maxButtons - 1 && (position === 'middle' || position === 'start'));\n\n                if (openingEllipsesNeeded) {\n                    pages.push({name: '...', value: '...', page: null});\n                } else if (closingEllipsesNeeded) {\n                    pages.push({name: '...', value: '...', page: null});\n                } else {\n                    var pageNumber = i;\n\n                    if (maxButtons === 1) {\n                        pageNumber = this.pagination.page;\n                    } else if (i === maxButtons) {\n                        pageNumber = this.pagination.lastPage;\n                    } else if (i === 1) {\n                        pageNumber = i;\n                    } else if (maxButtons < this.pagination.lastPage) {\n                        if (this.pagination.lastPage - halfWay < this.pagination.page) {\n                            pageNumber = this.pagination.lastPage - maxButtons + i;\n                        } else if (halfWay < this.pagination.page) {\n                            pageNumber = this.pagination.page - halfWay + i;\n                        } else {\n                            pageNumber = i;\n                        }\n                    } else {\n                        pageNumber = i;\n                    }\n\n                    pages.push({name: pageNumber, value: pageNumber, page: pageNumber, active: pageNumber === this.pagination.page});\n                }\n                i++;\n            }\n\n            return pages;\n        },\n\n        hasItems: function () {\n            return !this.loading && this.items && this.items.length > 0;\n        },\n\n        noItems: function () {\n            return !this.loading && this.items && !this.items.length;\n        },\n\n        checkedItems: function () {\n            return this.items.filter(function (item) {\n                return item.checked;\n            }).map(function (item) {\n                return item.id;\n            });\n        },\n\n        allItemsChecked: function () {\n            return this.items.length === this.checkedItems.length;\n        },\n\n        commentCount: function () {\n            return this.metrics.all;\n        }\n    },\n\n    ready: function () {\n        this.cpNav = $('a[href$=\"meerkat?source=cp-nav\"]');\n        if (typeof window.Statamic.Publish !== 'undefined') {\n            if (typeof window.Statamic.Publish.contentData !== 'undefined') {\n                if (typeof window.Statamic.Publish.contentData.id !== 'undefined') {\n                    this.streamFilter = window.Statamic.Publish.contentData.id;\n                }\n            }\n        }\n\n        if (this.ifilter != null) {\n            if (this.ifilter == 'all') {\n                this.filter = 'all';\n                if (this.autoload) {\n                    this.filterItems('all');\n                }\n            } else if (this.ifilter == 'pending') {\n                this.filter = 'pending';\n                if (this.autoload) {\n                    this.filterItems('pending');\n                }\n            } else if (this.ifilter == 'spam') {\n                this.filter = 'spam';\n                if (this.autoload) {\n                    this.filterItems('spam');\n                }\n            } else if (this.ifilter == 'approved') {\n                this.filter = 'approved';\n                if (this.autoload) {\n                    this.filterItems('approved');                    \n                }\n            } else {\n                this.filter = 'all';\n                if (this.autoload) {\n                    this.filterItems('all');                    \n                }\n            }\n        } else {\n            this.filter = 'all';\n            if (this.autoload) {\n                this.filterItems('all');                \n            }\n        }\n        this.setHeaders(this.filter);\n        if (this.can('super')) {\n            this.addActionPartial();\n        }\n\n        var _vm = this;\n        window.onpopstate = function (event) {\n            var query = _vm.getQueryParam(document.location.search);\n\n            if (typeof query.filter !== 'undefined') {\n                if (query.filter !== _vm.filter) {\n                    var ifilter = query.filter;\n                    if (ifilter != null) {\n                        if (ifilter == 'all') {\n                            _vm.filterItems('all');\n                        } else if (ifilter == 'pending') {\n                            _vm.filterItems('pending');\n                        } else if (ifilter == 'spam') {\n                            _vm.filterItems('spam');\n                        } else if (ifilter == 'approved') {\n                            _vm.filterItems('approved');\n                        } else {\n                            _vm.filterItems('all');\n                        }\n                    } else {\n                        _vm.filterItems('all');\n                    }\n                }\n            }\n        }\n\n    },\n\n    components: {\n        'dossier-table': DossierTable\n    },\n\n    methods: {\n        parentStateNeedsRefresh: function () {\n            var changeCount = 0;\n            changeCount += this.instanceChanges.commentEdits.length;\n            changeCount += this.instanceChanges.commentRemovals.length;\n            changeCount += this.instanceChanges.commentReplies.length;\n            changeCount += this.instanceChanges.commentMarkedAsNotSpam.length;\n            changeCount += this.instanceChanges.commentMarkedAsSpam.length;\n            changeCount += this.instanceChanges.commentApprovals.length;\n            changeCount += this.instanceChanges.commentUnApprovals.length;\n            return changeCount > 0;\n        },\n        openConversation: function (id) {\n            this.$parent.meerkat_ConversationView.open(id);\n        },\n        streamFor: function (id) {\n            this.loadStreamFor = id;\n        },\n        setIntendedComment: function (id) {\n            this.intendedComment = id;\n            this.$children[0].setIntended(id);\n        },\n        setSortingOrder: function(col, order) {\n            this.tableOptions.sortOrder = order;\n            this.$children[0].sortBy(col);\n        },\n        overrideMobile: function () {\n            this.passMobileOverride = true;\n        },\n        checkForSpam: function() {\n            this.checkingSpam = true;\n            var self = this;\n\n            this.$http.post(this.ajax.checkSpam, {}, function(data, status, request) {\n                self.checkingSpam = false;\n\n                // Refresh the items.\n                self.getItems();\n                self.refreshCounts();\n            });\n\n        },\n        refreshCounts: function () {\n            var self = this;\n          this.$http.get(this.ajax.getcounts, {}, function (data) {\n\n              if (typeof data !== 'object') {\n                  return;\n              }\n\n              self.metrics.all = data.counts.all;\n              self.metrics.approved = data.counts.approved;\n              self.metrics.pending = data.counts.pending;\n              self.metrics.spam = data.counts.spam;\n\n              if (data.counts.pending <= 0) {\n                  self.cpNav.find('.badge').remove();\n              } else {\n                  if (data.counts.pending > 0) {\n                      if (self.cpNav.find('.badge').length > 0) {\n                          self.cpNav.find('.badge').text(data.counts.pending);\n                      } else {\n                          var badge = $('<span class=\"badge bg-red\">' + data.counts.pending + '</span>');\n                          self.cpNav.append(badge);\n                      }\n                  }\n              }\n          });\n        },\n        refreshView: function(callback) {\n\n            if (typeof this.filter === 'undefined' || this.filter == null || this.filter.length == 0) {\n                this.filter = 'all';\n            }\n\n            this.getItems(callback);\n        },\n        setHeaders: function (filter) {\n            if (typeof filter !== 'undefined' && filter !== null) {\n                if (filter == 'approved') {\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\n                        translate('addons.Meerkat::comments.metric_approved') + ' ' +\n                        translate('addons.Meerkat::comments.comments')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\n                        translate('addons.Meerkat::comments.comments_approved_possessive')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\n                        translate('addons.Meerkat::comments.no_approved_comments')\n                    );\n                } else if (filter == 'pending') {\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\n                        translate('addons.Meerkat::comments.metric_pending') + ' ' +\n                        translate('addons.Meerkat::comments.comments')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\n                        translate('addons.Meerkat::comments.comments_pending_possessive')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\n                        translate('addons.Meerkat::comments.no_pending_comments')\n                    );\n                } else if (filter == 'spam') {\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\n                        translate('addons.Meerkat::comments.metric_spam') + ' ' +\n                        translate('addons.Meerkat::comments.comments')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\n                        translate('addons.Meerkat::comments.comments_spam_possessive')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\n                        translate('addons.Meerkat::comments.no_spam_comments')\n                    );\n                } else {\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\n                        translate('addons.Meerkat::comments.comments')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\n                        translate('addons.Meerkat::comments.comments_possessive')\n                    );\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\n                        translate('addons.Meerkat::comments.no_comments')\n                    );\n                }\n            }\n        },\n        getItems: function (callback) {\n            this.loading = true;\n\n            var params = { filter: this.filter };\n\n            if (this.tableOptions.paginate) {\n                params.paginate = true;\n                params.perPage = this.tableOptions.perPage;\n                params.page = this.tableOptions.currentPage;\n            }\n\n            if (this.streamFilter !== null) {\n                params.stream = this.streamFilter;\n            }\n\n            if (this.loadStreamFor !== null) {\n                params.stream = null;\n                params.streamFor = this.loadStreamFor;\n            }\n\n            var _vm = this;\n            this.$http.get(this.ajax.get, params, function (data, status, request) {\n\n                if (_vm.tableOptions.paginate == true) {\n                    _vm.items = data.items.data;\n                    _vm.pagination.from = data.items.from;\n                    _vm.pagination.to = data.items.to;\n                    _vm.pagination.prevPage = data.items.prev_page_url;\n                    _vm.pagination.nextPage = data.items.next_page_url;\n                    _vm.pagination.lastPage = data.items.last_page;\n                    _vm.pagination.page = _vm.tableOptions.currentPage;\n                } else {\n                    _vm.items = data.items;\n                }\n                \n                if (typeof callback !== 'undefined' && callback != null) {\n                    callback(_vm.items);\n                }\n\n                _vm.columns = data.columns;\n                _vm.metrics = data.statistics;\n                _vm.loading = false;\n                _vm.setHeaders(_vm.filter);\n                window.setTimeout(function () {\n                    _vm.setHeaders(_vm.filter);\n                }, 25);\n            }).error(function (response) {\n                alert('There was a problem retrieving data. Check your logs for more details.');\n            });\n        },\n\n        previousPage: function() {\n            if (this.pagination.prevPage !== null) {\n                this.tableOptions.currentPage--;\n                this.getItems();\n            }\n        },\n\n        nextPage: function() {\n            if (this.pagination.nextPage !== null) {\n                this.tableOptions.currentPage++;\n                this.getItems();\n            }\n        },\n\n        goToPage: function(page) {\n          if (page > 0 && page <= this.pagination.lastPage) {\n              this.tableOptions.currentPage = page;\n              this.getItems();\n          }\n        },\n\n        filterItems: function(filter) {\n            this.tableOptions.currentPage = 1;\n            this.filter = filter;\n            this.getItems();\n\n            this.updateURLState(filter);\n            this.setHeaders(filter);\n            this.refreshCounts();\n        },\n\n        updateURLState: function (filter) {\n            var currentLocation = window.location.href;\n            currentLocation = this.updateQueryString(currentLocation, 'filter', filter);\n            if (history.pushState) {\n                history.pushState(null, null, currentLocation);\n            }\n        },\n        getQueryParam: function(qs) {\n            qs = qs.split('+').join(' ');\n\n            var params = {},\n                tokens,\n                re = /[?&]?([^=]+)=([^&]*)/g;\n\n            while (tokens = re.exec(qs)) {\n                params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\n            }\n\n            return params;\n        },\n        updateQueryString: function (uri, key, value) {\n            var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n            var separator = uri.indexOf('?') !== -1 ? \"&\" : \"?\";\n            if (uri.match(re)) {\n                return uri.replace(re, '$1' + key + \"=\" + value + '$2');\n            }\n            else {\n                return uri + separator + key + \"=\" + value;\n            }\n        },\n\n        editComment: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.editing = true;\n        },\n\n        replyToComment: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.writing_reply = true;\n        },\n        raiseError: function (messageTitle, fallbackMessage, data) {\n            if (typeof data !== 'undefined' && data != null && data.length > 0) {\n                var dataMessage = '<ul>';\n\n                var _errorMesssages = data.length,\n                    _i = 0;\n                \n                for (_i; _i < _errorMesssages; _i++) {\n                    dataMessage += '<li>' + data[_i] + '</li>';\n                }\n\n                dataMessage += '</ul>';\n\n                swal({\n                    title: messageTitle,\n                    text: dataMessage,\n                    type: 'error',\n                    html: true\n                });\n\n            } else {\n                swal(messageTitle, fallbackMessage, 'error');                \n            }\n        },\n        createNewReply: function (id) {\n            var self = this;\n            var item = _.findWhere(this.items, {id: id});\n\n            item.saving = true;\n\n            self.$http.post(self.ajax.create, {ids: [id], comment: item['new_reply']}, function (data) {\n                if (data.success) {\n                    self.$parent.flashSuccess = translate('addons.Meerkat::actions.save_success');\n                    // Turn off reply editor.\n                    item.new_reply = '';\n                    item.writing_reply = false;\n                    self.items.push(data.submission);\n                    self.metrics.all++;\n                    self.metrics.pending++;\n                    self.instanceChanges.commentReplies.push(data.submission);\n                    self.refreshCounts();\n                } else {\n                    self.$parent.flashSuccess = false;\n                    self.$parent.flashError = translate('addons.Meerkat::actions.save_failure') + data.errorMessage;\n                }\n\n                // Indicate that we are no longer saving the comment, regardless of how it went.\n                item.saving = false;\n            }).catch(function (e) {\n                var title = translate('addons.Meerkat::errors.comments_create_reply');\n                var validationError = translate('addons.Meerkat::errors.comments_create_reply_validation');\n                var genericError = translate('addons.Meerkat::errors.comments_create_reply_generic');\n\n                if (typeof e.data !== 'undefined' && typeof e.data.errors !== undefined && e.data.errors.length > 0) {\n                    this.raiseError(title, validationError, e.data.errors);\n                } else {    \n                    this.raiseError(title, genericError);\n                }\n\n                item.saving = false;\n            });\n        },\n\n        cancelPostReply: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.writing_reply = false;\n        },\n\n        cancelItemEdit: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.editing = false;\n        },\n\n        saveItemEdits: function (id) {\n            var self = this;\n            var item = _.findWhere(this.items, {id: id});\n\n            // Indicate that we are saving the comment.\n            item.saving = true;\n\n            self.$http.post(self.ajax.update, {ids: [id], comment: item['original_markdown']}, function (data) {\n                if (data.success) {\n                    self.$parent.flashSuccess = translate('addons.Meerkat::actions.save_success');\n                    item.comment = data.parsedContent;\n                    // Turn off editing.\n                    item.editing = false;\n                    self.instanceChanges.commentEdits.push(id);\n                    self.refreshCounts();\n                } else {\n                    self.$parent.flashSuccess = false;\n                    self.$parent.flashError = translate('addons.Meerkat::actions.save_failure') + data.errorMessage;\n                }\n\n                // Indicate that we are no longer saving the comment, regardless of how it went.\n                item.saving = false;\n            }).catch(function (e) {\n                var title = translate('addons.Meerkat::errors.comments_save');\n                var validationError = translate('addons.Meerkat::errors.comments_save_validation');\n                var genericError = translate('addons.Meerkat::errors.comments_save_generic');\n\n                if (typeof e.data !== 'undefined' && typeof e.data.errors !== undefined && e.data.errors.length > 0) {\n                    this.raiseError(title, validationError, e.data.errors);\n                } else {    \n                    this.raiseError(title, genericError);\n                }\n\n                item.saving = false;\n            });\n        },\n\n        removeItemFromList: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            var index = _.indexOf(this.items, item);\n            this.items.splice(index, 1);\n        },\n\n        changeItemToApprove: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.published = true;\n        },\n\n        changeItemToUnApproved: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.published = false;\n        },\n\n        changeItemToIsSpam: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.spam = true;\n        },\n\n        changeItemToNotSpam: function (id) {\n            var item = _.findWhere(this.items, {id: id});\n            item.spam = false;\n        },\n\n        deleteItem: function (id) {\n            var self = this;\n\n            swal({\n                type: 'warning',\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\n                text: translate_choice('addons.Meerkat::actions.confirm_delete_comment', 1),\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\n                showCancelButton: true\n            }, function () {\n                self.$http.delete(self.ajax.delete, {ids: [id]}, function (data) {\n                    _.each(data.removed, function (removedId) {\n                        self.removeItemFromList(removedId);\n                        self.metrics.all--;\n                    });\n                    // Just in case ;)\n                    self.removeItemFromList(id);\n                    self.instanceChanges.commentRemovals.push(id);\n                    self.refreshCounts();\n                }).catch(function (e) {\n                    var title = translate('addons.Meerkat::errors.comments_remove');\n                    var genericError = translate('addons.Meerkat::errors.comments_remove_desc');\n\n                    this.raiseError(title, genericError);\n                });\n            });\n        },\n\n        deleteMultiple: function () {\n            var self = this;\n\n            swal({\n                type: 'warning',\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\n                text: translate_choice('addons.Meerkat::actions.confirm_delete_comment', 2),\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\n                showCancelButton: true\n            }, function () {\n                self.applyingBulkActions = true;\n                self.$http.delete(self.ajax.delete, {ids: self.checkedItems}, function (data) {\n                    if (data.success) {\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.delete_success', data.removed.length);\n                        _.each(data.removed, function (removedId) {\n                            self.removeItemFromList(removedId);\n                            self.instanceChanges.commentRemovals.push(removedId);\n                            self.metrics.all--;\n                        });\n                    } else {\n                        self.$parent.flashSuccess = false;\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.delete_failed', data.removed.length);\n                    }\n                    self.applyingBulkActions = false;\n                    self.refreshCounts();\n                    self.refreshView();\n                }).catch(function (e) {\n                    var title = translate('addons.Meerkat::errors.comments_remove_plural');\n                    var genericError = translate('addons.Meerkat::errors.comments_remove_plural_desc');\n\n                    this.raiseError(title, genericError);\n                    self.applyBulkActions = false;\n                });\n            });\n        },\n\n        approveComment: function (id) {\n            var self = this;\n            self.applyingBulkActions = true;\n            self.$http.post(self.ajax.approve, {ids: [id]}, function (data) {\n                if (data.success) {\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.approve_success', data.approved.length);\n                    _.each(data.approved, function (approvedId) {\n                        self.changeItemToApprove(approvedId);\n                        self.metrics.approved++;\n                        self.metrics.pending--;\n                        self.instanceChanges.commentApprovals.push(approvedId);\n                    });\n                    self.refreshCounts();\n                } else {\n                    self.$parent.flashSuccess = false;\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.approve_failed', data.approved.length) + data.errorMessage;\n                }\n            }).catch(function (e) {\n                var title = translate('addons.Meerkat::errors.comments_approve');\n                var genericError = translate('addons.Meerkat::errors.comments_approve_desc');\n\n                this.raiseError(title, genericError);\n            });\n        },\n\n        approveMultiple: function () {\n            var self = this;\n            self.applyingBulkActions = true;\n            self.$http.post(self.ajax.approve, {ids: self.checkedItems}, function (data) {\n                if (data.success) {\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.approve_success', data.approved.length);\n                    _.each(data.approved, function (approvedId) {\n                        self.changeItemToApprove(approvedId);\n                        self.metrics.approved++;\n                        self.metrics.pending--;\n                        self.instanceChanges.commentApprovals.push(approvedId);\n                    });\n                    self.refreshCounts();\n                    self.refreshView();\n                } else {\n                    self.$parent.flashSuccess = false;\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.approve_failed', data.approved.length) + data.errorMessage;\n                }\n\n                self.applyingBulkActions = false;\n            }).catch(function (e) {\n                var title = translate('addons.Meerkat::errors.comments_approve_plural');\n                var genericError = translate('addons.Meerkat::errors.comments_approve_plural_desc');\n\n                this.raiseError(title, genericError);\n                self.applyingBulkActions = false;\n            });\n        },\n\n        unApproveComment: function (id) {\n            var self = this;\n\n            self.$http.post(self.ajax.unapprove, {ids: [id]}, function (data) {\n                if (data.success) {\n                    self.$parent.flashError = false;\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.unapprove_success', data.unapproved.length);\n                    _.each(data.unapproved, function (unApprovedId) {\n                        self.changeItemToUnApproved(unApprovedId);\n                        self.metrics.approved--;\n                        self.metrics.pending++;\n                        self.instanceChanges.commentUnApprovals.push(unApprovedId);\n                    });\n                    self.refreshCounts();\n                } else {\n                    self.$parent.flashSuccess = false;\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.unapprove_failed', data.unapproved.length) + data.errorMessage;\n                }\n            }).catch(function (e) {\n                var title = translate('addons.Meerkat::errors.comments_unapprove');\n                var genericError = translate('addons.Meerkat::errors.comments_unapprove_desc');\n\n                this.raiseError(title, genericError);\n            });\n        },\n\n        unApproveMultiple: function () {\n            var self = this;\n            self.applyingBulkActions = true;\n            self.$http.post(self.ajax.unapprove, {ids: self.checkedItems}, function (data) {\n                if (data.success) {\n                    self.$parent.flashError = false;\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.unapprove_success', data.unapproved.length);\n                    _.each(data.unapproved, function (unApprovedId) {\n                        self.changeItemToUnApproved(unApprovedId);\n                        self.metrics.approved--;\n                        self.metrics.pending++;\n                        self.instanceChanges.commentUnApprovals.push(unApprovedId);\n                    });\n                    self.refreshCounts();\n                    self.refreshView();\n                } else {\n                    self.$parent.flashSuccess = false;\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.unapprove_failed', data.unapproved.length) + data.errorMessage;\n                }\n\n                self.applyingBulkActions = false;\n            }).catch(function (e) {\n                var title = translate('addons.Meerkat::errors.comments_unapprove_plural');\n                var genericError = translate('addons.Meerkat::errors.comments_unapprove_desc_plural');\n\n                this.raiseError(title, genericError);\n                self.applyBulkActions = false;\n            });\n        },\n\n        markItemAsSpam: function (id) {\n            var self = this;\n\n            swal({\n                type: 'warning',\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_spam', 1),\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\n                showCancelButton: true\n            }, function () {\n                self.$http.post(self.ajax.spam, {ids: [id]}, function (data) {\n                    if (data.success) {\n                        self.$parent.flashError = false;\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.spam_success', data.marked.length);\n                        _.each(data.marked, function (markedAsSpam) {\n                            self.changeItemToIsSpam(markedAsSpam);\n                            self.metrics.spam++;\n                            self.metrics.approved--;\n                            self.instanceChanges.commentMarkedAsSpam.push(markedAsSpam);\n                        });\n                        self.refreshCounts();\n                    } else {\n                        self.$parent.flashSuccess = false;\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.spam_failed', data.marked.length);\n                    }\n                }).catch(function (e) {\n                    var title = translate('addons.Meerkat::errors.comments_mark_spam');\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_spam_desc');\n\n                    this.raiseError(title, genericError);\n                });\n            });\n        },\n\n        markMultipleAsSpam: function () {\n            var self = this;\n\n            swal({\n                type: 'warning',\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_spam', 1),\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\n                showCancelButton: true\n            }, function () {\n                self.applyingBulkActions = true;\n                self.$http.post(self.ajax.spam, {ids: self.checkedItems}, function (data) {\n                    if (data.success) {\n                        self.$parent.flashError = false;\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.spam_success', data.marked.length);\n                        _.each(data.marked, function (markedAsSpam) {\n                            self.changeItemToIsSpam(markedAsSpam);\n                            self.metrics.spam++;\n                            self.metrics.approved--;\n                            self.instanceChanges.commentMarkedAsSpam.push(markedAsSpam);\n                        });\n                        self.refreshCounts();\n                        self.refreshView();\n                    } else {\n                        self.$parent.flashSuccess = false;\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.spam_failed', data.marked.length);\n                    }\n\n                    self.applyingBulkActions = false;\n                }).catch(function (e) {\n                    var title = translate('addons.Meerkat::errors.comments_mark_spam_plural');\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_spam_desc_plural');\n\n                    this.raiseError(title, genericError);\n                    self.applyingBulkActions = false;\n                });\n            });\n        },\n\n        markItemAsNotSpam: function (id) {\n            var self = this;\n\n            swal({\n                type: 'warning',\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_not_spam', 1),\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\n                showCancelButton: true\n            }, function () {\n                self.$http.post(self.ajax.notspam, {ids: [id]}, function (data) {\n                    if (data.success) {\n                        self.$parent.flashError = false;\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.not_spam_success', data.marked.length);\n                        _.each(data.marked, function (markedAsNotSpam) {\n                            self.changeItemToNotSpam(markedAsNotSpam);\n                            self.metrics.spam--;\n                            self.metrics.approved++;\n                            self.instanceChanges.commentMarkedAsNotSpam.push(markedAsNotSpam);\n                        });\n                        self.refreshCounts();\n                    } else {\n                        self.$parent.flashSuccess = false;\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.not_spam_failed', data.marked.length);\n                    }\n                }).catch(function (e) {\n                    var title = translate('addons.Meerkat::errors.comments_mark_not_spam');\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_not_spam_desc');\n\n                    this.raiseError(title, genericError);\n                });\n            });\n        },\n\n        markMultipleAsNotSpam: function () {\n            var self = this;\n\n            swal({\n                type: 'warning',\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_not_spam', 1),\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\n                showCancelButton: true\n            }, function () {\n                self.applyingBulkActions = true;\n                self.$http.post(self.ajax.notspam, {ids: self.checkedItems}, function (data) {\n                    if (data.success) {\n                        self.$parent.flashError = false;\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.not_spam_success', data.marked.length);\n                        _.each(data.marked, function (markedAsNotSpam) {\n                            self.changeItemToNotSpam(markedAsNotSpam);\n                            self.metrics.approved++;\n                            self.metrics.spam--;\n                            self.instanceChanges.commentMarkedAsNotSpam.push(markedAsNotSpam);\n                        });\n                        self.refreshCounts();\n                        self.refreshView();\n                    } else {\n                        self.$parent.flashSuccess = false;\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.not_spam_failed', data.marked.length);\n                    }\n\n                    self.applyingBulkActions = false;\n                }).catch(function (e) {\n                    var title = translate('addons.Meerkat::errors.comments_mark_not_spam_plural');\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_not_spam_desc_plural');\n\n                    this.raiseError(title, genericError);\n                    self.applyBulkActions = false;\n                });\n            });\n        },\n\n        applyBulkActions: function (action) {\n            switch (action) {\n                case 'delete':\n                    this.deleteMultiple();\n                    break;\n                case 'approve':\n                    this.approveMultiple();\n                    break;\n                case 'unapprove':\n                    this.unApproveMultiple();\n                    break;\n                case 'spam':\n                    this.markMultipleAsSpam();\n                    break;\n                case 'notspam':\n                    this.markMultipleAsNotSpam();\n                    break;\n            }\n        },\n\n        enableReorder: function () {\n            this.reordering = true;\n            this.$broadcast('reordering.start');\n        },\n\n        cancelOrder: function () {\n            this.reordering = false;\n            this.$broadcast('reordering.stop');\n        },\n\n        saveOrder: function () {\n            this.saving = true;\n            var _vm = this;\n\n            var order = _.map(this.items, function (item, i) {\n                return item.id;\n            });\n\n            this.$http.post(this.ajax.reorder, {ids: order}, function () {\n                _vm.saving = false;\n                _vm.$broadcast('reordering.saved');\n                _vm.loading = true;\n                _vm.getItems();\n                _vm.reordering = false;\n            });\n        },\n\n        addActionPartial: function () {\n            this.tableOptions.partials.actions = Meerkat.getMeerkatAddActionPartial();\n            this.tableOptions.partials.bulkActions = Meerkat.getBulkActionsTempalte();\n            this.tableOptions.partials.avatar = Meerkat.getAvatarTemplate();\n        }\n    }\n\n});\n","Vue.component('meerkat-conversation-view', {\n\n    data: function () {\n        return {\n            isOpen: false,\n            rootComment: null\n        }\n    },\n\n    watch: {\n        isOpen: function (value) {\n            if (value) {\n                $('body').addClass('meerkat-overflow-hidden');\n            } else {\n                $('body').removeClass('meerkat-overflow-hidden');\n            }\n        }\n    },\n\n    methods: {\n        open: function (commentId) {\n            this.$children[0].streamFor(commentId);\n            this.$children[0].setIntendedComment(commentId);\n            \n            var _vm = this;\n            this.$children[0].refreshView(function (items) {\n                var rootComment = items.filter(function (item) {\n                    return item.id == commentId;\n                });\n\n                if (rootComment.length > 0) {\n                    _vm.rootComment = rootComment[0];\n                }\n            });\n            this.$children[0].setSortingOrder('datestamp', 'asc');\n            this.$children[0].setIntendedComment(commentId);\n            this.isOpen = true;\n        },\n        close: function () {\n            this.isOpen = false;\n            if (this.$children[0].parentStateNeedsRefresh()) {\n                var streamListing = this.getMainStreamListing();\n                if (typeof streamListing !== 'undefined' && streamListing !== null) {\n                    streamListing.refreshView();\n                }\n            }\n        },\n        getMainStreamListing: function () {\n            for (var i = 0; i < this.$parent.$children.length; i++) {\n                var child = this.$parent.$children[i];\n                if (child instanceof MeerkatStreamListing) {\n                    return child;\n                }\n            }\n        }\n    },\n\n    components: {\n        'meerkat-stream-listing': MeerkatStreamListing\n    },\n\n    ready: function () {\n        this.$parent.meerkat_ConversationView = this;\n        window.cpt = this.$parent;\n        this.$children[0].overrideMobile();\n    }\n\n});"]}