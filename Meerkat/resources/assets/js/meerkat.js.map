{"version":3,"sources":["meerkat.js","urls.js","api.js","publisher.js","app.js","dossier.js","dossier_cell.js","add_action.js","stream_cell.js","bulkactions.js","str_limit.js","DossierTable.js","MeerkatStreamListing.js","ConversationView.js"],"names":[],"mappingstxhoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"meerkat.js","sourcesContent":["Meerkat = {\r\n\r\n    /**\r\n     * Sets the bulk actions template.\r\n     *\r\n     * @param value\r\n     * @returns {Meerkat}\r\n     */\r\n    setBulkActionsTemplate: function (value) {\r\n        this.bulk_actions_template = value;\r\n        return this;\r\n    },\r\n\r\n    getConversationLabel: function (collection) {\r\n        return '';\r\n    },\r\n\r\n    /**\r\n     * Gets the bulk actions template.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getBulkActionsTempalte: function() {\r\n        return this.bulk_actions_template;\r\n    },\r\n\r\n    setAvatarTemplate: function(value) {\r\n        this.avatar_tempalte = value;\r\n        return this;\r\n    },\r\n\r\n    getAvatarTemplate: function() {\r\n        return this.avatar_tempalte;\r\n    },\r\n\r\n    /**\r\n     * Sets the Dossier table template.\r\n     *\r\n     * @param value\r\n     * @returns {Meerkat}\r\n     */\r\n    setDossierTemplate: function (value) {\r\n        this.dossier_template = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the Dossier table template.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDossierTemplate: function () {\r\n        return this.dossier_template ? this.dossier_template : '';\r\n    },\r\n\r\n    /**\r\n     * Sets the Dossier cell template.\r\n     *\r\n     * @param value\r\n     * @returns {Meerkat}\r\n     */\r\n    setDossierCellTemplate: function (value) {\r\n        this.dossier_cell_template = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the Dossier cell template.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDossierCellTemplate: function () {\r\n        return this.dossier_cell_template ? this.dossier_cell_template : '';\r\n    },\r\n\r\n    /**\r\n     * Sets the Meerkat cell template.\r\n     *\r\n     * @param value\r\n     * @returns {Meerkat}\r\n     */\r\n    setMeerkatCellTemplate: function(value) {\r\n        this.meerkat_cell_template = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     *Gets the Meerkat cell template.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMeerkatCellTemplate: function() {\r\n        return this.meerkat_cell_template ? this.meerkat_cell_template : '';\r\n    },\r\n\r\n    /**\r\n     * Sets the Meerkat add action partial template.\r\n     *\r\n     * @param value\r\n     * @returns {Meerkat}\r\n     */\r\n    setMeerkatAddActionPartialTemplate: function(value) {\r\n        this.meerkat_add_action_template = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the Meerkat add action partial.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMeerkatAddActionPartial: function() {\r\n      return this.meerkat_add_action_template ? this.meerkat_add_action_template : '';\r\n    },\r\n\r\n    compareVersionString: function(v1, comparator, v2) {\r\n        \"use strict\";\r\n        var comparator = comparator == '=' ? '==' : comparator;\r\n        if(['==','===','<','<=','>','>=','!=','!=='].indexOf(comparator) == -1) {\r\n            throw new Error('Invalid comparator. ' + comparator);\r\n        }\r\n        var v1parts = v1.split('.'), v2parts = v2.split('.');\r\n        var maxLen = Math.max(v1parts.length, v2parts.length);\r\n        var part1, part2;\r\n        var cmp = 0;\r\n        for(var i = 0; i < maxLen && !cmp; i++) {\r\n            part1 = parseInt(v1parts[i], 10) || 0;\r\n            part2 = parseInt(v2parts[i], 10) || 0;\r\n            if(part1 < part2)\r\n                cmp = 1;\r\n            if(part1 > part2)\r\n                cmp = -1;\r\n        }\r\n        return eval('0' + comparator + cmp);\r\n    },\r\n\r\n    compareStatamicVersion: function(comparator, desiredVersion) {\r\n        return Meerkat.compareVersionString(Statamic.version, comparator, desiredVersion);\r\n    }\r\n\r\n};\r\n","/**\r\n * Executes a given callback when the user visits a given CP URL.\r\n *\r\n * @param url\r\n * @param callback\r\n */\r\nfunction forUrl(url, callback) {\r\n    if (Statamic.urlPath == Statamic.cpRoot + \"/\" + url) {\r\n        return callback();\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction whenPublisher(callback) {\r\n    if (typeof Statamic.Publish !== 'undefined' && location.pathname.toLowerCase().endsWith('create') == false && location.pathname.toLowerCase().endsWith('create/') == false) {\r\n        return callback();\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Returns a URL relative to the origin.\r\n *\r\n * @param relative\r\n * @returns {string}\r\n */\r\nfunction originUrl(relative) {\r\n    return window.location.origin + \"/\" + relative;\r\n}\r\n","Meerkat.API = {\r\n\r\n    /**\r\n     * The comment count API URL.\r\n     */\r\n    getCommentCount: originUrl('!/Meerkat/api-comment-count'),\r\n\r\n    /**\r\n     * The all comments API URL.\r\n     */\r\n    getAllComments: originUrl('!/Meerkat/api-comments'),\r\n\r\n    /**\r\n     * The Meerkat addon URL.\r\n     */\r\n    addonPath: originUrl(Statamic.cpRoot + '/addons/meerkat'),\r\n\r\n    /**\r\n     * The name of the Meerkat form.\r\n     */\r\n    formName: 'meerkat'\r\n\r\n};","Meerkat.Publisher = {\r\n\r\n    publisherStream: '',\r\n    contentWrap: null,\r\n\r\n    setupNavigation: function () {\r\n          var publisherNavigation = $('<ul class=\"nav nav-tabs\" style=\"width:100%;\" data-meerkat-publisher=\"tab-navigation\"><li role=\"presentation\" class=\"active\" data-meerkat-publisher=\"tab:content\"><a href=\"#\" data-meerkat-publisher=\"toggle:content\">'\r\n            + translate('addons.Meerkat::comments.content') + '</a></li><li role=\"presentation\" data-meerkat-publisher=\"tab:comments\"><a href=\"#\" data-meerkat-publisher=\"toggle:comments\">'\r\n            + translate('addons.Meerkat::comments.comments') + '</a></li></ul>');\r\n          $('[data-meerkat-publisher=\"fields-main\"]').parent().prepend(publisherNavigation);\r\n\r\n          $('[data-meerkat-publisher=\"toggle:content\"]').on('click', function (e) {\r\n              $('[data-meerkat-publisher=\"tab:comments\"]').removeClass('active');\r\n              $('[data-meerkat-publisher=\"tab:content\"]').addClass('active');\r\n\r\n              $('[data-meerkat-publisher=\"comments-main\"]').hide();\r\n              $(window.Meerkat.Publisher.contentWrap).show();\r\n          });\r\n\r\n          $('[data-meerkat-publisher=\"toggle:comments\"]').on('click', function (e) {\r\n              $('[data-meerkat-publisher=\"tab:comments\"]').addClass('active');\r\n              $('[data-meerkat-publisher=\"tab:content\"]').removeClass('active');\r\n\r\n              $(window.Meerkat.Publisher.contentWrap).hide();\r\n              $('[data-meerkat-publisher=\"comments-main\"]').show();\r\n          });\r\n    },\r\n\r\n    setupSecondaryCard: function () {\r\n        var secondCard = '<div class=\"card\" data-meerkat-publisher=\"comments-main\"></div>';\r\n        $('[data-meerkat-publisher=\"fields-main\"]').parent().append(secondCard);\r\n\r\n        $('[data-meerkat-publisher=\"comments-main\"]').append($(Meerkat.Publisher.publisherStream));\r\n\r\n        $('[data-meerkat-publisher=\"comments-main\"]').hide();\r\n    },\r\n\r\n    setupInstance: function () {\r\n        var vm = new Vue({\r\n            'el': '#meerkat-publisher-stream'\r\n        });\r\n    },\r\n\r\n    setup: function () {\r\n        console.log('inside publish setup');\r\n        var publishWrap = null;\r\n\r\n        if ($('#publish-fields').length) {\r\n            publishWrap = '#publish-fields';\r\n        } else if ($('.publish-fields')) {\r\n            publishWrap = '.publish-fields:first';\r\n        }\r\n\r\n        if (publishWrap != null) {\r\n            window.Meerkat.Publisher.contentWrap = $(publishWrap);\r\n            $(publishWrap).attr('data-meerkat-publisher', 'fields-main');\r\n            $(publishWrap + ' .card:first').attr('data-meerkat-publisher', 'publish-fields');\r\n            Meerkat.Publisher.setupSecondaryCard();\r\n            Meerkat.Publisher.setupNavigation();\r\n            Meerkat.Publisher.setupInstance();\r\n        }\r\n    }\r\n\r\n};","/**\r\n * This will override the response count for the Meerkat form.\r\n */\r\nforUrl('forms', function () {\r\n    var meerkatCardHref = window.location.href + \"/\" + Meerkat.API.formName;\r\n    var meerkatCard = document.querySelectorAll(\"a[href='\" + meerkatCardHref + \"']\");\r\n\r\n\r\n    if (Meerkat.compareStatamicVersion('<', '2.7.0')) {        \r\n        if (meerkatCard.length > 0) {\r\n            meerkatCard = meerkatCard[0];\r\n            meerkatCard.setAttribute(\"href\", Meerkat.API.addonPath);\r\n            var cardMajor = meerkatCard.getElementsByTagName(\"span\")[0];\r\n    \r\n            fetch(Meerkat.API.getCommentCount, {\r\n                method: 'GET'\r\n            }).then(function (response) {\r\n                return response.json();\r\n            }).then(function (data) {\r\n                cardMajor.innerText = data.count;\r\n            }).catch(function (err) {\r\n                cardMajor.innerText = 0;\r\n            });\r\n        }\r\n    } else {\r\n        if (meerkatCard.length > 0) {\r\n            var cardInner = $(meerkatCard[0]).parent().children().first('div.stat')[0];\r\n            meerkatCard[0].setAttribute('href', Meerkat.API.addonPath);\r\n\r\n            fetch(Meerkat.API.getCommentCount, {\r\n                metod: 'GET'\r\n            }).then(function (response) {\r\n                return response.json();\r\n            }).then(function (data) {\r\n                cardInner.innerHTML = '<span class=\"icon icon-documents\"></span> ' + data.count;\r\n            }).catch(function (err) {\r\n                cardInner.innerHTML = '<span class=\"icon icon-documents\"></span> 0';\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Redirect the user to the Meerkat addon path.\r\n */\r\nforUrl('forms/' + Meerkat.API.formName, function () {\r\n    window.location = Meerkat.API.addonPath;\r\n});\r\n\r\n(function () {\r\n    $(document).ready(function () {\r\n        whenPublisher(function () {\r\n            /** Setup the publisher experience. */\r\n            Meerkat.Publisher.setup();\r\n        });\r\n    });\r\n})();","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setDossierTemplate(\"\\n<div class=\\\"meerkat-bulk-action-wrapper pull-left\\\" v-if=\\\"showBulkActions\\\">\\n    <partial name=\\\"bulkActions\\\"></partial>\\n</div>\\n\\n<table class=\\\"dossier meerkat-comments-table table-striped\\\" v-if=\\\"sizes.md || sizes.lg\\\">\\n    <thead v-if=\\\"hasHeaders\\\">\\n        <tr>\\n            <th class=\\\"checkbox-col\\\" v-if=\\\"hasCheckboxes\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"checkbox-all\\\" :checked=\\\"allItemsChecked\\\" @click=\\\"checkAllItems\\\" />\\n                <label for=\\\"checkbox-all\\\"></label>\\n            </th>\\n\\n            <th v-for=\\\"column in columns\\\"\\n                @click=\\\"sortBy(column)\\\"\\n                class=\\\"column-sortable\\\"\\n                :class=\\\"['column-' + column.label, {'active': sortCol === column.field} ]\\\"\\n            >\\n                <template v-if=\\\"column.translation\\\">{{ column.translation }}</template>\\n                <template v-else>{{ translate('cp.'+column.label) }}</template>\\n                <i v-if=\\\"sortCol === column.field\\\"\\n                    class=\\\"icon icon-chevron-{{ (sortOrders[column.field] > 0) ? 'up' : 'down' }}\\\"></i>\\n            </th>\\n        </tr>\\n    </thead>\\n    <tbody data-meerkat-type=\\\"comment\\\" v-el:tbody v-for=\\\"item in items | filterBy computedSearch | caseInsensitiveOrderBy computedSortCol computedSortOrder\\\">\\n        <tr\\n            data-meerkat-type=\\\"comment\\\"\\n            data-meerkat-comment-id=\\\"{{ item['id'] }}\\\" data-meerkat-comment-published=\\\"{{ item['published'].toString() }}\\\"\\n            data-meerkat-comment-spam=\\\"{{ item['spam'].toString() }}\\\">\\n        <td colspan=\\\"3\\\">\\n        <div class=\\\"comment-header-options\\\" v-if=\\\"item['published']\\\"><a href=\\\"{{ item['in_response_to_url'] }}#comment-{{ item['id'] }}\\\" target=\\\"_blank\\\" title=\\\"{{ translate('addons.Meerkat::actions.view_post_desc') }}\\\">{{ translate('addons.Meerkat::actions.view_post') }}</a></div>\\n        <div class=\\\"float-left\\\"><a name=\\\"meerkat-comment-{{ item['id'] }}\\\"></a><span class=\\\"icon icon-flag\\\" v-if=\\\"item['published'] === false\\\"></span> {{{ item['in_response_string'] }}}</div>\\n        </td>\\n        </tr>\\n        <tr data-meerkat-type=\\\"comment\\\"\\n            data-meerkat-comment-id=\\\"{{ item['id'] }}\\\" data-meerkat-comment-published=\\\"{{ item['published'].toString() }}\\\"\\n            data-meerkat-comment-spam=\\\"{{ item['spam'].toString() }}\\\">\\n\\n            <td class=\\\"checkbox-col\\\" v-if=\\\"hasCheckboxes && !reordering\\\">\\n                <input type=\\\"checkbox\\\" :id=\\\"'checkbox-' + $index\\\" :checked=\\\"item.checked\\\" @change=\\\"toggle(item)\\\" />\\n                <label :for=\\\"'checkbox-' + $index\\\"></label>\\n            </td>\\n\\n            <td class=\\\"checkbox-col\\\" v-if=\\\"reordering\\\">\\n                <div class=\\\"drag-handle\\\">\\n                    <i class=\\\"icon icon-menu\\\"></i>\\n                </div>\\n            </td>\\n\\n            <td v-for=\\\"column in columns\\\" class=\\\"cell-{{ column.field }}\\\">\\n                <partial name=\\\"cell\\\"></partial>\\n            </td>\\n        </tr>\\n    </tbody>\\n</table>\\n<div v-if=\\\"sizes.sm || sizes.xs\\\" class=\\\"meerkat-mobile-table\\\">\\n    <div v-for=\\\"item in items | filterBy computedSearch | caseInsensitiveOrderBy computedSortCol computedSortOrder\\\">\\n        <div data-meerkat-mobile=\\\"wrap\\\" data-meerkat-type=\\\"comment\\\"\\n            data-meerkat-comment-id=\\\"{{ item['id'] }}\\\" data-meerkat-comment-published=\\\"{{ item['published'].toString() }}\\\"\\n            data-meerkat-comment-spam=\\\"{{ item['spam'].toString() }}\\\">\\n            <partial name=\\\"cell\\\"></partial>                        \\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"meerkat-pagination-wrapper\\\">\\n    <ul class=\\\"pagination meerkat-pagination\\\">\\n        <li v-if=\\\"$parent.pagination.prevPage\\\">\\n            <a href=\\\"\\\" @click.prevent=\\\"call('previousPage')\\\" aria-label=\\\"{{ translate('addons.Meerkat::pagination.previous') }}\\\"><span>&laquo;</span></a>\\n        </li>\\n        <li v-for=\\\"page in $parent.pages\\\">\\n            <a href=\\\"\\\" @click.prevent=\\\"call('goToPage', page.page)\\\" v-bind:class=\\\"{ 'active': page.active }\\\" :disabled=\\\"page.page === null\\\">{{ page.name }}</a>\\n        </li>\\n        <li v-if=\\\"$parent.pagination.nextPage\\\">\\n            <a href=\\\"\\\" @click.prevent=\\\"call('nextPage')\\\" aria-label=\\\"{{ translate('addons.Meerkat::pagination.next') }}\\\"><span>&raquo;</span></a>\\n        </li>\\n    </ul>\\n</div>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=dossier.js.map\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setDossierCellTemplate(\"\\n    <a v-if=\\\"$index === 0\\\" :href=\\\"item.edit_url\\\">\\n        <span class=\\\"status status-{{ (item.published) ? 'live' : 'hidden' }}\\\"\\n              :title=\\\"(item.published) ? translate('cp.published') : translate('cp.draft')\\\"\\n        ></span>\\n        {{ item[column.label] }}\\n    </a>\\n    <template v-else>\\n        {{ item[column.label] }}\\n    </template>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=dossier_cell.js.map\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setMeerkatAddActionPartialTemplate(\"\\n    <li v-if=\\\"item['published'] === false && item['is_approving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('approveComment', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.approve_desc') }}\\\"><span class=\\\"icon icon-check\\\"></span> {{ translate('addons.Meerkat::actions.approve') }}</a></li>\\n    <li v-if=\\\"item['published'] === false && item['is_approving'] === true\\\"><a href=\\\"#\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.approving') }}</a></li>\\n    \\n    <li v-if=\\\"item['published'] === true && item['is_taking_action'] == false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('unApproveComment', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.unapprove_desc') }}\\\">{{ translate('addons.Meerkat::actions.unapprove') }}</a></li>\\n    <li v-if=\\\"item['published'] === true && item['is_unapproving'] === true\\\"><a href=\\\"#\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.unapproving') }}</a></li>\\n    \\n    \\n    <li v-if=\\\"item['is_taking_action'] == false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('replyToComment', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.reply_desc') }}\\\"><span class=\\\"icon icon-reply\\\"></span> {{ translate('addons.Meerkat::actions.reply') }}</a></li>\\n    <li v-if=\\\"item['is_taking_action'] == false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('editComment', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.edit_desc') }}\\\"><span class=\\\"icon icon-edit\\\"></span> {{ translate('addons.Meerkat::actions.edit') }}</a></li>\\n\\n    <li v-if=\\\"item['spam'] === false && item['is_taking_action'] == false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('markItemAsSpam', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.spam_desc') }}\\\"><span class=\\\"icon icon-shield\\\"></span> {{ translate('addons.Meerkat::actions.spam') }}</a></li>\\n    <li v-if=\\\"item['spam'] === false && item['is_markingspam'] == true\\\"><a href=\\\"#\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.spam_submitting') }}</a></li>\\n\\n    <li v-if=\\\"item['spam'] === true && item['is_taking_action'] == false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('markItemAsNotSpam', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.not_spam_desc') }}\\\"><span class=\\\"icon icon-shield\\\"></span> {{ translate('addons.Meerkat::actions.not_spam') }}</a></li>\\n    <li v-if=\\\"item['spam'] === true && item['is_markingnotspam'] == true\\\"><a href=\\\"#\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.spam_submitting') }}</a></li>\\n\\n    <li v-if=\\\"item['is_taking_action'] == false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('deleteItem', item)\\\" title=\\\"{{ translate('addons.Meerkat::actions.delete_desc') }}\\\"><span class=\\\"icon icon-trash\\\"></span> {{ translate('addons.Meerkat::actions.delete') }}</a></li>\\n    <li v-if=\\\"item['is_deleting'] === true\\\"><a href=\\\"#\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.delete_removing') }}</a></li>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=add_action.js.map\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setMeerkatCellTemplate(\"\\n<div v-if=\\\"sizes.md || sizes.lg\\\">\\n<div class=\\\"media\\\" v-if=\\\"$index === 0\\\">\\n    <partial name=\\\"avatar\\\"></partial>\\n    <div class=\\\"media-body\\\"> <h4 class=\\\"media-heading\\\">{{ item['name'] }}</h4>\\n        <span class=\\\"icon icon-mail\\\"></span> <a href=\\\"mailto:{{ item['email'] }}\\\">{{ item['email'] }}</a><br />\\n        \\n        <div v-if=\\\"item['url']\\\"><a href=\\\"{{ item['url'] }}\\\" target=\\\"_blank\\\"><span class=\\\"icon icon-globe\\\"></span> {{ item['url'] }}</a></div>\\n    </div>\\n</div>\\n<div v-if=\\\"$index === 1\\\">\\n    <div data-meerkat-comment=\\\"response\\\" v-if=\\\"item['is_reply']\\\">\\n    {{ translate('addons.Meerkat::comments.in_reply_to_simple') }} <a @click.prevent=\\\"call('openConversation', item['parent_comment_id'])\\\">{{ item['parent_comment_name'] }}</a>\\n    </div>\\n\\n    <div data-meerkat-comment=\\\"content\\\" v-if=\\\"item['editing'] === false\\\">\\n    {{{ item['comment'] }}}\\n    </div>\\n    <div v-if=\\\"item['editing'] === true\\\">\\n        <div class=\\\"markdown-fieldtype\\\">\\n            <markdown-fieldtype :data.sync=\\\"item['original_markdown']\\\"></markdown-fieldtype>\\n        </div>\\n        <ul class=\\\"list-inline\\\" data-meerkat-has=\\\"actions\\\">\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('saveItemEdits', item)\\\"><span class=\\\"icon icon-check\\\"></span> {{ translate('addons.Meerkat::actions.save') }}</a></li>\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelItemEdit', item)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n        <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.saving') }}</li>\\n        </ul>\\n    </div>\\n    <div v-if=\\\"item['writing_reply'] === true\\\">\\n        <div class=\\\"markdown-fieldtype\\\">\\n            <markdown-fieldtype :data.sync=\\\"item['new_reply']\\\"></markdown-fieldtype>\\n        </div>\\n        <ul class=\\\"list-inline\\\" data-meerkat-has=\\\"actions\\\">\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('createNewReply', item)\\\"><span class=\\\"icon icon-reply\\\"></span> {{ translate('addons.Meerkat::actions.reply') }}</a></li>\\n        <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelPostReply', item)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n        <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.replying') }}</li>\\n        </ul>\\n    </div>\\n    <div data-meerkat-type=\\\"comment\\\" data-meerkat-has=\\\"actions\\\"\\n         v-if=\\\"hasActions\\\">\\n    <ul class=\\\"list-inline\\\" v-if=\\\"item['editing'] === false && item['writing_reply'] === false\\\">\\n    <partial name=\\\"actions\\\"></partial>\\n    </ul>\\n    </div>\\n</div>\\n<div v-if=\\\"$index === 3\\\">\\n    <a href=\\\"/cp/collections/entries{{ item['in_response_to_edit_url'] }}\\\">{{ item['in_response_to'] }}</a><br />\\n    <div v-if=\\\"item['published']\\\">\\n        <small><a href=\\\"{{ item['in_response_to_url'] }}#comment-{{ item['id'] }}\\\" target=\\\"_blank\\\" title=\\\"{{ translate('addons.Meerkat::actions.view_post_desc') }}\\\">{{ translate('addons.Meerkat::actions.view_post') }}</a></small><br />\\n    </div>\\n    <span class=\\\"label label-default\\\"><span class=\\\"icon icon-chat\\\"></span> {{ item['comment_count'] }}</span>\\n</div>\\n</div>\\n<div v-if=\\\"sizes.sm || sizes.xs\\\">\\n    <div class=\\\"meerkat-mobile-card\\\" id=\\\"meerkat-mobile-comment-card-{{ item['id'] }}\\\" v-bind:class=\\\"{ 'meerkat-conversation-intended-comment': ($parent.$parent.intendedComment != null && $parent.$parent.intendedComment == item['id']) }\\\">\\n        <div class=\\\"meerkat-mobile-card-header\\\" v-bind:class=\\\"{ 'is-selected': item.checked }\\\">\\n            <div class=\\\"meerkat-mobile-card-avatar\\\">\\n                <partial name=\\\"avatar\\\"></partial>\\n            </div>\\n            <a class=\\\"meerkat-mobile-card-indicator\\\" v-bind:class=\\\"{ 'checked': item.checked }\\\" @click.prevent=\\\"$parent.toggle(item)\\\"></a>\\n            <h5>\\n                {{ item['name'] }}\\n                <span v-if=\\\"item['is_reply']\\\">\\n                    <span v-if=\\\"$parent.$parent.loadStreamFor !== null\\\">\\n                        - {{ translate('addons.Meerkat::comments.in_reply_to_simple') }} {{ item['parent_comment_name'] }}\\n                    </span>\\n                    <span v-else>\\n                        - {{ translate('addons.Meerkat::comments.in_reply_to_simple') }} <a @click.prevent=\\\"call('openConversation', item['parent_comment_id'])\\\">{{ item['parent_comment_name'] }}\\n                        <span v-if=\\\"item['conversation_participants'].length - 2 > 0\\\">( +{{ item['conversation_participants'].length - 2 }} {{ Meerkat.getConversationLabel([]) }}\\n                            <span v-if=\\\"item['conversation_participants'].length - 2 == 1\\\">{{ translate('addons.Meerkat::comments.conversation_other_singular') }}</span>\\n                            <span v-if=\\\"item['conversation_participants'].length - 2 > 1\\\">{{ translate('addons.Meerkat::comments.conversation_other_plural') }}</span>\\n                        )</span></a>\\n                    </span>\\n                </span>\\n            </h5>\\n            <h6><a href=\\\"mailto:{{ item['email'] }}\\\">{{ item['email'] }}</a></h6>\\n        </div>\\n        <div class=\\\"meerkat-mobile-card-content\\\">\\n            <div class=\\\"comment-header-options meerkat-mobile-card-reply-to\\\">\\n                {{{ item['in_response_string'] }}}\\n            </div>\\n\\n            <div data-meerkat-comment=\\\"content\\\" v-if=\\\"item['editing'] === false\\\">\\n            {{{ item['comment'] }}}\\n            </div>\\n            <div v-if=\\\"item['editing'] === true\\\">\\n                <div class=\\\"markdown-fieldtype\\\">\\n                    <markdown-fieldtype :data.sync=\\\"item['original_markdown']\\\"></markdown-fieldtype>\\n                </div>\\n                <ul class=\\\"list-inline meerkat-mobile-edit-actions\\\" data-meerkat-has=\\\"actions\\\">\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('saveItemEdits', item)\\\"><span class=\\\"icon icon-check\\\"></span> {{ translate('addons.Meerkat::actions.save') }}</a></li>\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelItemEdit', item)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n                <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.saving') }}</li>\\n                </ul>\\n            </div>\\n            <div v-if=\\\"item['writing_reply'] === true\\\">\\n                <div class=\\\"markdown-fieldtype\\\">\\n                    <markdown-fieldtype :data.sync=\\\"item['new_reply']\\\"></markdown-fieldtype>\\n                </div>\\n                <ul class=\\\"list-inline meerkat-mobile-edit-actions\\\" data-meerkat-has=\\\"actions\\\">\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('createNewReply', item)\\\"><span class=\\\"icon icon-reply\\\"></span> {{ translate('addons.Meerkat::actions.reply') }}</a></li>\\n                <li v-if=\\\"item['saving'] === false\\\"><a href=\\\"#\\\" @click.prevent=\\\"call('cancelPostReply', item)\\\">{{ translate('addons.Meerkat::actions.cancel') }}</a></li>\\n                <li v-if=\\\"item['saving'] === true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.replying') }}</li>\\n                </ul>\\n            </div>\\n        </div>\\n        <div class=\\\"meerkat-mobile-card-footer\\\" v-if=\\\"item['editing'] === false && item['writing_reply'] === false\\\">\\n            <div data-meerkat-type=\\\"comment\\\" data-meerkat-has=\\\"actions\\\"\\n                    v-if=\\\"hasActions\\\">\\n                <ul class=\\\"list-inline meerkat-mobile-card-actions\\\" v-if=\\\"item['editing'] === false && item['writing_reply'] === false\\\">\\n                <partial name=\\\"actions\\\"></partial>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=stream_cell.js.map\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nMeerkat.setBulkActionsTemplate(\"\\n<select class=\\\"meerkat-bulk-actions form-control\\\" v-model=\\\"bulkAction\\\">\\n    <option value=\\\"delete\\\" selected>{{ translate_choice('addons.Meerkat::actions.bulk_delete', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"approve\\\">{{ translate_choice('addons.Meerkat::actions.bulk_approve', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"unapprove\\\">{{ translate_choice('addons.Meerkat::actions.bulk_unapprove', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"spam\\\">{{ translate_choice('addons.Meerkat::actions.bulk_mark_spam', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n    <option value=\\\"notspam\\\">{{ translate_choice('addons.Meerkat::actions.bulk_mark_not_spam', checkedItems.length) }} ({{ checkedItems.length }} {{ translate_choice('addons.Meerkat::comments.comments_c', checkedItems.length) }})</option>\\n</select>\\n<a href=\\\"#\\\" @click.prevent=\\\"call('applyBulkActions', bulkAction)\\\" class=\\\"btn btn-default\\\" v-if=\\\"$parent.applyingBulkActions == false\\\"><span class=\\\"icon icon-tools\\\"></span> {{ translate('addons.Meerkat::actions.apply') }}</a>\\n<span v-if=\\\"$parent.applyingBulkActions == true\\\"><span class=\\\"icon icon-circular-graph animation-spin\\\"></span> {{ translate('addons.Meerkat::actions.applying') }}</span>\\n\");\n\n},{}]},{},[1]);\n\n//# sourceMappingURL=bulkactions.js.map\n","Vue.filter('strlimit', function(value, length) {\r\n    if (value.toString().length <= length) {\r\n        return value;\r\n    }\r\n\r\n    return value.toString().substring(0, length) + '...';\r\n});","window.DossierTable = DossierTable = Vue.component('DossierTable', {\r\n\r\n    template: Meerkat.getDossierTemplate(),\r\n\r\n    props: ['options', 'keyword'],\r\n\r\n    data: function () {\r\n        return {\r\n            items: [],\r\n            columns: [],\r\n            sortCol: this.options.sort || null,\r\n            sortOrder: this.options.sortOrder || 'asc',\r\n            sortOrders: {},\r\n            reordering: false,\r\n            sizes: {\r\n                xs: false,\r\n                sm: false,\r\n                md: false,\r\n                lg: false\r\n            },\r\n            shouldOverrideToMobile: false        }\r\n    },\r\n\r\n    partials: {\r\n        // The default cell markup will be a link to the edit_url with a status symbol\r\n        // if it's the first cell. Remaining cells just get the label.\r\n        cell: Meerkat.getDossierCellTemplate()\r\n    },\r\n\r\n    computed: {\r\n\r\n        hasCheckboxes: function () {\r\n            if (this.options.checkboxes === false) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        itemsAreChecked: function () {\r\n            return this.checkedItems.length > 0;\r\n        },\r\n\r\n        hasSearch: function () {\r\n            if (this.options.search === false) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        hasHeaders: function () {\r\n            if (this.options.headers === false) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        hasActions: function () {\r\n            return this.options.partials.actions !== undefined\r\n                && this.options.partials.actions !== '';\r\n        },\r\n\r\n        showBulkActions: function () {\r\n            return (this.hasItems && this.hasCheckboxes && this.itemsAreChecked && !this.reordering);\r\n        },\r\n\r\n        hasItems: function () {\r\n            return this.$parent.hasItems;\r\n        },\r\n\r\n        reorderable: function () {\r\n            return this.options.reorderable;\r\n        },\r\n\r\n        checkedItems: function () {\r\n            return this.items.filter(function (item) {\r\n                return item.checked;\r\n            }).map(function (item) {\r\n                return item.id;\r\n            });\r\n        },\r\n\r\n        allItemsChecked: function () {\r\n            return this.items.length === this.checkedItems.length;\r\n        },\r\n\r\n        computedSearch: function () {\r\n            if (this.reordering) {\r\n                return null;\r\n            }\r\n\r\n            return this.keyword;\r\n        },\r\n\r\n        computedSortCol: function () {\r\n            if (this.reordering) {\r\n                return false;\r\n            }\r\n\r\n            return this.sortCol;\r\n        },\r\n\r\n        computedSortOrder: function () {\r\n            if (this.reordering) {\r\n                return false;\r\n            }\r\n\r\n            return this.sortOrders[this.sortCol];\r\n        }\r\n    },\r\n\r\n    beforeCompile: function () {\r\n        var self = this;\r\n\r\n        _.each(self.options.partials, function (str, name) {\r\n            self.$options.partials[name] = str;\r\n        });\r\n    },\r\n\r\n    ready: function () {\r\n        this.items = this.$parent.items;\r\n        this.columns = this.$parent.columns;\r\n\r\n        this.setColumns();\r\n        this.setSortOrders();\r\n\r\n        this.sortCol = this.options.sort || this.columns[0].field;\r\n\r\n        if (typeof this.$parent !== 'undefined' && this.$parent !== null) {\r\n            if (typeof this.$parent.passMobileOverride !== 'undefined') {\r\n                if (this.$parent.passMobileOverride) {\r\n                    this.shouldOverrideToMobile = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', this.handleResize);\r\n        this.handleResize();\r\n    },\r\n\r\n    beforeDestroy: function () {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    },\r\n\r\n    methods: {\r\n\r\n        setIntended: function (intended) {\r\n            this.intendedComment = intended;\r\n        },\r\n\r\n        handleResize: function () {\r\n\r\n            if (this.shouldOverrideToMobile) {\r\n                this.sizes.xs = true;\r\n                this.sizes.sm = false;\r\n                this.sizes.md = false;\r\n                this.sizes.lg = false;\r\n                return;\r\n            }\r\n\r\n            var width = window.innerWidth;\r\n\r\n            if (width <= 767) {\r\n                this.sizes.xs = true;\r\n                this.sizes.sm = false;\r\n                this.sizes.md = false;\r\n                this.sizes.lg = false;\r\n                return;\r\n            }\r\n            if (width >= 768 && width <= 991) {\r\n                this.sizes.xs = false;\r\n                this.sizes.sm = true;\r\n                this.sizes.md = false;\r\n                this.sizes.lg = false;\r\n                return;\r\n            }\r\n            if (width >= 992 && width <= 1199) {\r\n                this.sizes.xs = false;\r\n                this.sizes.sm = false;\r\n                this.sizes.md = true;\r\n                this.sizes.lg = false;\r\n                return;\r\n            }\r\n            if (width >= 1200) {\r\n                this.sizes.xs = false;\r\n                this.sizes.sm = false;\r\n                this.sizes.md = false;\r\n                this.sizes.lg = true;\r\n                return;\r\n            }\r\n        },\r\n        \r\n        registerPartials: function () {\r\n            var self = this;\r\n\r\n            _.each(self.options.partials, function (str, name) {\r\n                Vue.partial(name, str);\r\n            });\r\n        },\r\n\r\n        setColumns: function () {\r\n            var columns = [];\r\n            _.each(this.columns, function (column) {\r\n                if (typeof column === 'object') {\r\n                    columns.push({label: column.label, field: column.field, translation: column.translation});\r\n                } else {\r\n                    columns.push({label: column, field: column});\r\n                }\r\n            });\r\n            this.columns = columns;\r\n        },\r\n\r\n        setSortOrders: function () {\r\n            var sortOrders = {};\r\n            _.each(this.columns, function (col) {\r\n                sortOrders[col.field] = 1;\r\n            });\r\n\r\n            // Apply the initial sort order\r\n            sortOrders[this.sortCol] = (this.sortOrder === 'asc') ? 1 : -1;\r\n\r\n            this.sortOrders = sortOrders;\r\n        },\r\n\r\n        sortBy: function (col) {\r\n            if (this.sortCol === col.field) {\r\n                this.sortOrders[col.field] = this.sortOrders[col.field] * -1;\r\n            }\r\n\r\n            this.sortCol = col.field;\r\n        },\r\n\r\n        checkAllItems: function () {\r\n            var status = !this.allItemsChecked;\r\n\r\n            _.each(this.items, function (item) {\r\n                item.checked = status;\r\n            });\r\n        },\r\n\r\n        toggle: function (item) {\r\n            item.checked = !item.checked;\r\n        },\r\n\r\n        enableReorder: function () {\r\n            var self = this;\r\n\r\n            self.reordering = true;\r\n\r\n            $(this.$els.tbody).sortable({\r\n                axis: 'y',\r\n                revert: 175,\r\n                placeholder: 'placeholder',\r\n                handle: '.drag-handle',\r\n                forcePlaceholderSize: true,\r\n\r\n                start: function (e, ui) {\r\n                    ui.item.data('start', ui.item.index())\r\n                },\r\n\r\n                update: function (e, ui) {\r\n                    var start = ui.item.data('start'),\r\n                        end = ui.item.index();\r\n\r\n                    self.items.splice(end, 0, self.items.splice(start, 1)[0]);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        disableReorder: function () {\r\n            this.reordering = false;\r\n            $(this.$els.tbody).sortable('destroy');\r\n        },\r\n\r\n        saveOrder: function () {\r\n            this.$parent.saveOrder();\r\n        },\r\n\r\n        /**\r\n         * Dynamically call a method on the parent component\r\n         *\r\n         * Eg. `call('foo', 'bar', 'baz')` would be the equivalent\r\n         * of doing `this.$parent.foo('bar', 'baz')`\r\n         */\r\n        call: function (method) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            this.$parent[method].apply(this, args);\r\n        }\r\n    },\r\n\r\n    events: {\r\n        'reordering.start': function () {\r\n            this.enableReorder();\r\n        },\r\n        'reordering.saved': function () {\r\n            this.reordering = false;\r\n        },\r\n        'reordering.stop': function () {\r\n            this.disableReorder();\r\n        }\r\n    }\r\n});","window.MeerkatStreamListing = MeerkatStreamListing = Vue.component('meerkat-stream-listing', {\r\n\r\n    props: [\r\n        'get',\r\n        'delete',\r\n        'spam',\r\n        'notspam',\r\n        'approve',\r\n        'unapprove',\r\n        'update',\r\n        'create',\r\n        'checkspam',\r\n        'perpage',\r\n        'ifilter',\r\n        'hidemanagement',\r\n        'autoload',\r\n        'getcounts'\r\n    ],\r\n\r\n    data: function () {\r\n        return {\r\n            cpNav: null,\r\n            loading: true,\r\n            checkingSpam: false,\r\n            items: [],\r\n            streamFilter: null,\r\n            columns: [],\r\n            search: null,\r\n            metrics: [],\r\n            reordering: false,\r\n            filter: 'all',\r\n            hideManagement: this.hidemanagement,\r\n            ajax: {\r\n                get: this.get,\r\n                delete: this.delete,\r\n                spam: this.spam,\r\n                notspam: this.notspam,\r\n                approve: this.approve,\r\n                unapprove: this.unapprove,\r\n                update: this.update,\r\n                create: this.create,\r\n                checkSpam: this.checkspam,\r\n                getcounts: this.getcounts\r\n            },\r\n            pagination: {\r\n                nextPage: null,\r\n                prevPage: null,\r\n                from: null,\r\n                to: null,\r\n                lastPage: null,\r\n                page: null\r\n            },\r\n            tableOptions: {\r\n                checkboxes: true,\r\n                sort: 'datestamp',\r\n                sortOrder: 'desc',\r\n                showBulkOptions: true,\r\n                paginate: true,\r\n                currentPage: 1,\r\n                perPage: this.perpage,\r\n                partials: {\r\n                    cell: Meerkat.getMeerkatCellTemplate()\r\n                }\r\n            },\r\n            instanceChanges: {\r\n                commentEdits: [],\r\n                commentRemovals: [],\r\n                commentReplies: [],\r\n                commentMarkedAsSpam: [],\r\n                commentMarkedAsNotSpam: [],\r\n                commentApprovals: [],\r\n                commentUnApprovals: []\r\n            },\r\n            bulkAction: 'delete',\r\n            applyingBulkActions: false,\r\n            avatarDriver: Meerkat.config.avatar_driver,\r\n            passMobileOverride: false,\r\n            loadStreamFor: null,\r\n            intendedComment: null\r\n        }\r\n    },\r\n\r\n    computed: {\r\n\r\n        isPaginated: function() {\r\n            return this.tableOptions.paginate;\r\n        },\r\n\r\n        pages: function() {\r\n            var maxButtons = 5;\r\n            var pages = [];\r\n            var halfWay = Math.ceil(maxButtons / 2);\r\n            var position;\r\n\r\n            if (this.pagination.page <= halfWay) {\r\n                position = 'start';\r\n            } else if (this.pagination.lastPage - halfWay < this.pagination.page) {\r\n                position = 'end';\r\n            } else {\r\n                position = 'middle';\r\n            }\r\n\r\n            var ellipsesNeeded = maxButtons < this.pagination.lastPage;\r\n            var i = 1;\r\n\r\n            while (i <= this.pagination.lastPage && i <= maxButtons) {\r\n                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));\r\n                var closingEllipsesNeeded = (i === maxButtons - 1 && (position === 'middle' || position === 'start'));\r\n\r\n                if (openingEllipsesNeeded) {\r\n                    pages.push({name: '...', value: '...', page: null});\r\n                } else if (closingEllipsesNeeded) {\r\n                    pages.push({name: '...', value: '...', page: null});\r\n                } else {\r\n                    var pageNumber = i;\r\n\r\n                    if (maxButtons === 1) {\r\n                        pageNumber = this.pagination.page;\r\n                    } else if (i === maxButtons) {\r\n                        pageNumber = this.pagination.lastPage;\r\n                    } else if (i === 1) {\r\n                        pageNumber = i;\r\n                    } else if (maxButtons < this.pagination.lastPage) {\r\n                        if (this.pagination.lastPage - halfWay < this.pagination.page) {\r\n                            pageNumber = this.pagination.lastPage - maxButtons + i;\r\n                        } else if (halfWay < this.pagination.page) {\r\n                            pageNumber = this.pagination.page - halfWay + i;\r\n                        } else {\r\n                            pageNumber = i;\r\n                        }\r\n                    } else {\r\n                        pageNumber = i;\r\n                    }\r\n\r\n                    pages.push({name: pageNumber, value: pageNumber, page: pageNumber, active: pageNumber === this.pagination.page});\r\n                }\r\n                i++;\r\n            }\r\n\r\n            return pages;\r\n        },\r\n\r\n        hasItems: function () {\r\n            return !this.loading && this.items && this.items.length > 0;\r\n        },\r\n\r\n        noItems: function () {\r\n            return !this.loading && this.items && !this.items.length;\r\n        },\r\n\r\n        checkedItems: function () {\r\n            return this.items.filter(function (item) {\r\n                return item.checked;\r\n            }).map(function (item) {\r\n                return item.id;\r\n            });\r\n        },\r\n\r\n        allItemsChecked: function () {\r\n            return this.items.length === this.checkedItems.length;\r\n        },\r\n\r\n        commentCount: function () {\r\n            return this.metrics.all;\r\n        }\r\n    },\r\n\r\n    ready: function () {\r\n        this.cpNav = $('a[href$=\"meerkat?source=cp-nav\"]');\r\n        if (typeof window.Statamic.Publish !== 'undefined') {\r\n            if (typeof window.Statamic.Publish.contentData !== 'undefined') {\r\n                if (typeof window.Statamic.Publish.contentData.id !== 'undefined') {\r\n                    this.streamFilter = window.Statamic.Publish.contentData.id;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.ifilter != null) {\r\n            if (this.ifilter == 'all') {\r\n                this.filter = 'all';\r\n                if (this.autoload) {\r\n                    this.filterItems('all');\r\n                }\r\n            } else if (this.ifilter == 'pending') {\r\n                this.filter = 'pending';\r\n                if (this.autoload) {\r\n                    this.filterItems('pending');\r\n                }\r\n            } else if (this.ifilter == 'spam') {\r\n                this.filter = 'spam';\r\n                if (this.autoload) {\r\n                    this.filterItems('spam');\r\n                }\r\n            } else if (this.ifilter == 'approved') {\r\n                this.filter = 'approved';\r\n                if (this.autoload) {\r\n                    this.filterItems('approved');                    \r\n                }\r\n            } else {\r\n                this.filter = 'all';\r\n                if (this.autoload) {\r\n                    this.filterItems('all');                    \r\n                }\r\n            }\r\n        } else {\r\n            this.filter = 'all';\r\n            if (this.autoload) {\r\n                this.filterItems('all');                \r\n            }\r\n        }\r\n        this.setHeaders(this.filter);\r\n        /*if (this.can('super')) {*/\r\n            this.addActionPartial();\r\n        /*}*/\r\n\r\n        var _vm = this;\r\n        window.onpopstate = function (event) {\r\n            var query = _vm.getQueryParam(document.location.search);\r\n\r\n            if (typeof query.filter !== 'undefined') {\r\n                if (query.filter !== _vm.filter) {\r\n                    var ifilter = query.filter;\r\n                    if (ifilter != null) {\r\n                        if (ifilter == 'all') {\r\n                            _vm.filterItems('all');\r\n                        } else if (ifilter == 'pending') {\r\n                            _vm.filterItems('pending');\r\n                        } else if (ifilter == 'spam') {\r\n                            _vm.filterItems('spam');\r\n                        } else if (ifilter == 'approved') {\r\n                            _vm.filterItems('approved');\r\n                        } else {\r\n                            _vm.filterItems('all');\r\n                        }\r\n                    } else {\r\n                        _vm.filterItems('all');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    components: {\r\n        'dossier-table': DossierTable\r\n    },\r\n\r\n    methods: {\r\n        parentStateNeedsRefresh: function () {\r\n            var changeCount = 0;\r\n            changeCount += this.instanceChanges.commentEdits.length;\r\n            changeCount += this.instanceChanges.commentRemovals.length;\r\n            changeCount += this.instanceChanges.commentReplies.length;\r\n            changeCount += this.instanceChanges.commentMarkedAsNotSpam.length;\r\n            changeCount += this.instanceChanges.commentMarkedAsSpam.length;\r\n            changeCount += this.instanceChanges.commentApprovals.length;\r\n            changeCount += this.instanceChanges.commentUnApprovals.length;\r\n            return changeCount > 0;\r\n        },\r\n        openConversation: function (id) {\r\n            this.$parent.meerkat_ConversationView.open(id);\r\n        },\r\n        streamFor: function (id) {\r\n            this.loadStreamFor = id;\r\n        },\r\n        setIntendedComment: function (id) {\r\n            this.intendedComment = id;\r\n            this.$children[0].setIntended(id);\r\n        },\r\n        setSortingOrder: function(col, order) {\r\n            this.tableOptions.sortOrder = order;\r\n            this.$children[0].sortBy(col);\r\n        },\r\n        overrideMobile: function () {\r\n            this.passMobileOverride = true;\r\n        },\r\n        checkForSpam: function() {\r\n            this.checkingSpam = true;\r\n            var self = this;\r\n\r\n            this.$http.post(this.ajax.checkSpam, {}, function(data, status, request) {\r\n                self.checkingSpam = false;\r\n\r\n                // Refresh the items.\r\n                self.getItems();\r\n                self.refreshCounts();\r\n            });\r\n\r\n        },\r\n        refreshCounts: function () {\r\n            var self = this;\r\n          this.$http.get(this.ajax.getcounts, {}, function (data) {\r\n\r\n              if (typeof data !== 'object') {\r\n                  return;\r\n              }\r\n\r\n              self.metrics.all = data.counts.all;\r\n              self.metrics.approved = data.counts.approved;\r\n              self.metrics.pending = data.counts.pending;\r\n              self.metrics.spam = data.counts.spam;\r\n\r\n              if (data.counts.pending <= 0) {\r\n                  self.cpNav.find('.badge').remove();\r\n              } else {\r\n                  if (data.counts.pending > 0) {\r\n                      if (self.cpNav.find('.badge').length > 0) {\r\n                          self.cpNav.find('.badge').text(data.counts.pending);\r\n                      } else {\r\n                          var badge = $('<span class=\"badge bg-red\">' + data.counts.pending + '</span>');\r\n                          self.cpNav.append(badge);\r\n                      }\r\n                  }\r\n              }\r\n          });\r\n        },\r\n        refreshView: function(callback) {\r\n\r\n            if (typeof this.filter === 'undefined' || this.filter == null || this.filter.length == 0) {\r\n                this.filter = 'all';\r\n            }\r\n\r\n            this.getItems(callback);\r\n        },\r\n        setHeaders: function (filter) {\r\n            if (typeof filter !== 'undefined' && filter !== null) {\r\n                if (filter == 'approved') {\r\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\r\n                        translate('addons.Meerkat::comments.metric_approved') + ' ' +\r\n                        translate('addons.Meerkat::comments.comments')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\r\n                        translate('addons.Meerkat::comments.comments_approved_possessive')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\r\n                        translate('addons.Meerkat::comments.no_approved_comments')\r\n                    );\r\n                } else if (filter == 'pending') {\r\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\r\n                        translate('addons.Meerkat::comments.metric_pending') + ' ' +\r\n                        translate('addons.Meerkat::comments.comments')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\r\n                        translate('addons.Meerkat::comments.comments_pending_possessive')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\r\n                        translate('addons.Meerkat::comments.no_pending_comments')\r\n                    );\r\n                } else if (filter == 'spam') {\r\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\r\n                        translate('addons.Meerkat::comments.metric_spam') + ' ' +\r\n                        translate('addons.Meerkat::comments.comments')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\r\n                        translate('addons.Meerkat::comments.comments_spam_possessive')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\r\n                        translate('addons.Meerkat::comments.no_spam_comments')\r\n                    );\r\n                } else {\r\n                    $('[data-meerkat-ui=\"comments-header\"]').text(\r\n                        translate('addons.Meerkat::comments.comments')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-header\"]').text(\r\n                        translate('addons.Meerkat::comments.comments_possessive')\r\n                    );\r\n                    $('[data-meerkat-ui=\"comments-body-subheader\"]').text(\r\n                        translate('addons.Meerkat::comments.no_comments')\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        getItems: function (callback) {\r\n            this.loading = true;\r\n\r\n            var params = { filter: this.filter };\r\n\r\n            if (this.tableOptions.paginate) {\r\n                params.paginate = true;\r\n                params.perPage = this.tableOptions.perPage;\r\n                params.page = this.tableOptions.currentPage;\r\n            }\r\n\r\n            if (this.streamFilter !== null) {\r\n                params.stream = this.streamFilter;\r\n            }\r\n\r\n            if (this.loadStreamFor !== null) {\r\n                params.stream = null;\r\n                params.streamFor = this.loadStreamFor;\r\n            }\r\n\r\n            var _vm = this;\r\n            this.$http.get(this.ajax.get, params, function (data, status, request) {\r\n                var comments = [];\r\n\r\n                /* Add some state properties. */\r\n                for (let i = 0; i < data.items.data.length; i += 1) {\r\n                    var comment = data.items.data[i];\r\n                    comment.is_approving = false;\r\n                    comment.is_unapproving = false;\r\n                    comment.is_markingspam = false;\r\n                    comment.is_markingnotspam = false;\r\n                    comment.is_deleting = false;\r\n                    comment.is_taking_action = false;\r\n\r\n                    comments.push(comment);\r\n                }\r\n\r\n                if (_vm.tableOptions.paginate == true) {\r\n                    _vm.items = comments;\r\n                    _vm.pagination.from = data.items.from;\r\n                    _vm.pagination.to = data.items.to;\r\n                    _vm.pagination.prevPage = data.items.prev_page_url;\r\n                    _vm.pagination.nextPage = data.items.next_page_url;\r\n                    _vm.pagination.lastPage = data.items.last_page;\r\n                    _vm.pagination.page = _vm.tableOptions.currentPage;\r\n                } else {\r\n                    _vm.items = comments;\r\n                }\r\n                \r\n                if (typeof callback !== 'undefined' && callback != null) {\r\n                    callback(_vm.items);\r\n                }\r\n\r\n                _vm.columns = data.columns;\r\n                _vm.metrics = data.statistics;\r\n                _vm.loading = false;\r\n                _vm.setHeaders(_vm.filter);\r\n                window.setTimeout(function () {\r\n                    _vm.setHeaders(_vm.filter);\r\n                }, 25);\r\n            }).error(function (response) {\r\n                alert('There was a problem retrieving data. Check your logs for more details.');\r\n            });\r\n        },\r\n\r\n        previousPage: function() {\r\n            if (this.pagination.prevPage !== null) {\r\n                this.tableOptions.currentPage--;\r\n                this.getItems();\r\n            }\r\n        },\r\n\r\n        nextPage: function() {\r\n            if (this.pagination.nextPage !== null) {\r\n                this.tableOptions.currentPage++;\r\n                this.getItems();\r\n            }\r\n        },\r\n\r\n        goToPage: function(page) {\r\n          if (page > 0 && page <= this.pagination.lastPage) {\r\n              this.tableOptions.currentPage = page;\r\n              this.getItems();\r\n          }\r\n        },\r\n\r\n        filterItems: function(filter) {\r\n            this.tableOptions.currentPage = 1;\r\n            this.filter = filter;\r\n            this.getItems();\r\n\r\n            this.updateURLState(filter);\r\n            this.setHeaders(filter);\r\n            this.refreshCounts();\r\n        },\r\n\r\n        updateURLState: function (filter) {\r\n            var currentLocation = window.location.href;\r\n            currentLocation = this.updateQueryString(currentLocation, 'filter', filter);\r\n            if (history.pushState) {\r\n                history.pushState(null, null, currentLocation);\r\n            }\r\n        },\r\n        getQueryParam: function(qs) {\r\n            qs = qs.split('+').join(' ');\r\n\r\n            var params = {},\r\n                tokens,\r\n                re = /[?&]?([^=]+)=([^&]*)/g;\r\n\r\n            while (tokens = re.exec(qs)) {\r\n                params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\r\n            }\r\n\r\n            return params;\r\n        },\r\n        updateQueryString: function (uri, key, value) {\r\n            var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\r\n            var separator = uri.indexOf('?') !== -1 ? \"&\" : \"?\";\r\n            if (uri.match(re)) {\r\n                return uri.replace(re, '$1' + key + \"=\" + value + '$2');\r\n            }\r\n            else {\r\n                return uri + separator + key + \"=\" + value;\r\n            }\r\n        },\r\n\r\n        editComment: function (item) {\r\n            item.editing = true;\r\n        },\r\n\r\n        replyToComment: function (item) {\r\n            item.writing_reply = true;\r\n        },\r\n        raiseError: function (messageTitle, fallbackMessage, data) {\r\n            if (typeof data !== 'undefined' && data != null) {\r\n                var dataMessage = '<ul>';\r\n                var allErrors = [];\r\n\r\n\r\n                for (var errorBucket in data) {\r\n                    if (data.hasOwnProperty(errorBucket)) {\r\n                        if (errorBucket.length > 0) {\r\n                            for (var i = 0; i < data[errorBucket].length; i += 1) {\r\n                                allErrors.push(data[errorBucket][i]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var _errorMesssages = allErrors.length,\r\n                    _i = 0;\r\n                \r\n                for (_i; _i < _errorMesssages; _i++) {\r\n                    dataMessage += '<li>' + allErrors[_i] + '</li>';\r\n                }\r\n\r\n                dataMessage += '</ul>';\r\n\r\n                swal({\r\n                    title: messageTitle,\r\n                    text: dataMessage,\r\n                    type: 'error',\r\n                    html: true\r\n                });\r\n\r\n            } else {\r\n                swal(messageTitle, fallbackMessage, 'error');                \r\n            }\r\n        },\r\n        createNewReply: function (item) {\r\n            var self = this;\r\n            var id = item.id;\r\n\r\n            item.saving = true;\r\n\r\n            self.$http.post(self.ajax.create, {ids: [id], comment: item['new_reply']}, function (data) {\r\n                if (data.success) {\r\n                    self.$parent.flashSuccess = translate('addons.Meerkat::actions.save_success');\r\n                    // Turn off reply editor.\r\n                    item.new_reply = '';\r\n                    item.writing_reply = false;\r\n                    self.items.push(data.submission);\r\n                    self.metrics.all++;\r\n                    self.metrics.pending++;\r\n                    self.instanceChanges.commentReplies.push(data.submission);\r\n                    self.refreshCounts();\r\n                } else {\r\n                    item.saving = false;\r\n\r\n                    self.$parent.flashSuccess = false;\r\n                    self.$parent.flashError = translate('addons.Meerkat::actions.save_failure') + data.errorMessage;\r\n                    var title = translate('addons.Meerkat::errors.comments_create_reply');\r\n\r\n                    self.raiseError(title, translate('addons.Meerkat::actions.save_failure') + data.errorMessage);\r\n                }\r\n\r\n                // Indicate that we are no longer saving the comment, regardless of how it went.\r\n                item.saving = false;\r\n            }).catch(function (e) {\r\n                var title = translate('addons.Meerkat::errors.comments_create_reply');\r\n                var validationError = translate('addons.Meerkat::errors.comments_create_reply_validation');\r\n                var genericError = translate('addons.Meerkat::errors.comments_create_reply_generic');\r\n\r\n                item.saving = false;\r\n\r\n                if (typeof e.data !== 'undefined' && typeof e.data.errors !== undefined) {\r\n                    this.raiseError(title, validationError, e.data.errors);\r\n                } else {    \r\n                    this.raiseError(title, genericError);\r\n                }\r\n            });\r\n        },\r\n\r\n        cancelPostReply: function (item) {\r\n            item.writing_reply = false;\r\n        },\r\n\r\n        cancelItemEdit: function (item) {\r\n            item.editing = false;\r\n        },\r\n\r\n        saveItemEdits: function (item) {\r\n            var self = this;\r\n            var id = item.id;\r\n\r\n            // Indicate that we are saving the comment.\r\n            item.saving = true;\r\n\r\n            self.$http.post(self.ajax.update, {ids: [id], comment: item['original_markdown']}, function (data) {\r\n                if (data.success) {\r\n                    self.$parent.flashSuccess = translate('addons.Meerkat::actions.save_success');\r\n                    item.comment = data.parsedContent;\r\n                    // Turn off editing.\r\n                    item.editing = false;\r\n                    self.instanceChanges.commentEdits.push(id);\r\n                    self.refreshCounts();\r\n                } else {\r\n                    self.$parent.flashSuccess = false;\r\n                    self.$parent.flashError = translate('addons.Meerkat::actions.save_failure') + data.errorMessage;\r\n                    var title = translate('addons.Meerkat::errors.comments_save');\r\n\r\n                    self.raiseError(title, translate('addons.Meerkat::actions.save_failure') + data.errorMessage);\r\n                }\r\n\r\n                // Indicate that we are no longer saving the comment, regardless of how it went.\r\n                item.saving = false;\r\n            }).catch(function (e) {\r\n                var title = translate('addons.Meerkat::errors.comments_save');\r\n                var validationError = translate('addons.Meerkat::errors.comments_save_validation');\r\n                var genericError = translate('addons.Meerkat::errors.comments_save_generic');\r\n\r\n                item.saving = false;\r\n\r\n                if (typeof e.data !== 'undefined' && typeof e.data.errors !== undefined) {\r\n                    this.raiseError(title, validationError, e.data.errors);\r\n                } else {    \r\n                    this.raiseError(title, genericError);\r\n                }\r\n            });\r\n        },\r\n\r\n        removeItemFromList: function (id) {\r\n            var item = _.findWhere(this.items, {id: id});\r\n            var index = _.indexOf(this.items, item);\r\n            this.items.splice(index, 1);\r\n        },\r\n\r\n        changeItemToApprove: function (item) {\r\n            item.published = true;\r\n        },\r\n\r\n        changeItemToUnApproved: function (item) {\r\n            item.published = false;\r\n        },\r\n\r\n        changeItemToIsSpam: function (item) {\r\n            item.spam = true;\r\n        },\r\n\r\n        changeItemToNotSpam: function (item) {\r\n            item.spam = false;\r\n        },\r\n\r\n        deleteItem: function (item) {\r\n            var self = this;\r\n            var id = item.id;\r\n\r\n            swal({\r\n                type: 'warning',\r\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\r\n                text: translate_choice('addons.Meerkat::actions.confirm_delete_comment', 1),\r\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\r\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\r\n                showCancelButton: true\r\n            }, function () {\r\n                item.is_taking_action = true;\r\n                item.is_deleting = true;\r\n\r\n                self.$http.delete(self.ajax.delete, {ids: [id]}, function (data) {\r\n                    _.each(data.removed, function (removedId) {\r\n                        self.removeItemFromList(removedId);\r\n                        self.metrics.all--;\r\n                    });\r\n                    // Just in case ;)\r\n                    self.removeItemFromList(id);\r\n                    self.instanceChanges.commentRemovals.push(id);\r\n                    self.refreshCounts();\r\n                    item.is_taking_action = false;\r\n                    item.is_deleting = false;\r\n                }).catch(function (e) {\r\n                    var title = translate('addons.Meerkat::errors.comments_remove');\r\n                    var genericError = translate('addons.Meerkat::errors.comments_remove_desc');\r\n\r\n                    item.is_taking_action = false;\r\n                    item.is_deleting = false;\r\n\r\n                    this.raiseError(title, genericError);\r\n                });\r\n            });\r\n        },\r\n\r\n        deleteMultiple: function () {\r\n            var self = this;\r\n\r\n            swal({\r\n                type: 'warning',\r\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\r\n                text: translate_choice('addons.Meerkat::actions.confirm_delete_comment', 2),\r\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\r\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\r\n                showCancelButton: true\r\n            }, function () {\r\n                self.applyingBulkActions = true;\r\n                self.$http.delete(self.ajax.delete, {ids: self.checkedItems}, function (data) {\r\n                    if (data.success) {\r\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.delete_success', data.removed.length);\r\n                        _.each(data.removed, function (removedId) {\r\n                            self.removeItemFromList(removedId);\r\n                            self.instanceChanges.commentRemovals.push(removedId);\r\n                            self.metrics.all--;\r\n                        });\r\n                    } else {\r\n                        self.$parent.flashSuccess = false;\r\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.delete_failed', data.removed.length);\r\n                    }\r\n                    self.applyingBulkActions = false;\r\n                    self.refreshCounts();\r\n                    self.refreshView();\r\n                }).catch(function (e) {\r\n                    var title = translate('addons.Meerkat::errors.comments_remove_plural');\r\n                    var genericError = translate('addons.Meerkat::errors.comments_remove_plural_desc');\r\n\r\n                    self.applyBulkActions = false;\r\n\r\n                    this.raiseError(title, genericError);\r\n                });\r\n            });\r\n        },\r\n\r\n        approveComment: function (item) {\r\n            var self = this;\r\n            self.applyingBulkActions = true;\r\n            item.is_approving = true;\r\n            item.is_taking_action = true;\r\n\r\n            self.$http.post(self.ajax.approve, {ids: [item.id]}, function (data) {\r\n                if (data.success === true) {\r\n\r\n                    item.is_approving = false;\r\n                    item.is_taking_action = false;\r\n\r\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.approve_success', data.approved.length);\r\n                    _.each(data.approved, function (approvedId) {\r\n                        var _tItem = _.findWhere(self.items, {id: approvedId});\r\n\r\n                        self.changeItemToApprove(_tItem);\r\n                        self.metrics.approved++;\r\n                        self.metrics.pending--;\r\n                        self.instanceChanges.commentApprovals.push(approvedId);\r\n                    });\r\n                    self.refreshCounts();\r\n\r\n                } else {\r\n                    self.$parent.flashSuccess = false;\r\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.approve_failed', data.approved.length) + data.errorMessage;\r\n                    item.is_approving = false;\r\n                    item.is_taking_action = false;\r\n                }\r\n            }).catch(function (e) {\r\n                var title = translate('addons.Meerkat::errors.comments_approve');\r\n                var genericError = translate('addons.Meerkat::errors.comments_approve_desc');\r\n                item.is_approving = false;\r\n                item.is_taking_action = false;\r\n\r\n                this.raiseError(title, genericError);\r\n            });\r\n        },\r\n\r\n        approveMultiple: function () {\r\n            var self = this;\r\n            self.applyingBulkActions = true;\r\n            self.$http.post(self.ajax.approve, {ids: self.checkedItems}, function (data) {\r\n                if (data.success) {\r\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.approve_success', data.approved.length);\r\n                    _.each(data.approved, function (approvedId) {\r\n                        var _tItem = _.findWhere(self.items, {id: approvedId});\r\n\r\n                        self.changeItemToApprove(_tItem);\r\n                        self.metrics.approved++;\r\n                        self.metrics.pending--;\r\n                        self.instanceChanges.commentApprovals.push(approvedId);\r\n                    });\r\n                    self.refreshCounts();\r\n                    self.refreshView();\r\n                } else {\r\n                    self.$parent.flashSuccess = false;\r\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.approve_failed', data.approved.length) + data.errorMessage;\r\n                }\r\n\r\n                self.applyingBulkActions = false;\r\n            }).catch(function (e) {\r\n                var title = translate('addons.Meerkat::errors.comments_approve_plural');\r\n                var genericError = translate('addons.Meerkat::errors.comments_approve_plural_desc');\r\n\r\n                this.raiseError(title, genericError);\r\n                self.applyingBulkActions = false;\r\n            });\r\n        },\r\n\r\n        unApproveComment: function (item) {\r\n            var self = this;\r\n            var id = item.id;\r\n\r\n            item.is_taking_action = true;\r\n            item.is_unapproving = true;\r\n\r\n            self.$http.post(self.ajax.unapprove, {ids: [id]}, function (data) {\r\n                if (data.success) {\r\n                    self.$parent.flashError = false;\r\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.unapprove_success', data.unapproved.length);\r\n                    _.each(data.unapproved, function (unApprovedId) {\r\n                        var _tItem = _.findWhere(self.items, {id: unApprovedId});\r\n\r\n                        self.changeItemToUnApproved(_tItem);\r\n                        self.metrics.approved--;\r\n                        self.metrics.pending++;\r\n                        self.instanceChanges.commentUnApprovals.push(unApprovedId);\r\n                    });\r\n\r\n\r\n                    item.is_taking_action = false;\r\n                    item.is_unapproving = false\r\n                    self.refreshCounts();\r\n                } else {\r\n                    self.$parent.flashSuccess = false;\r\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.unapprove_failed', data.unapproved.length) + data.errorMessage;\r\n\r\n                    item.is_taking_action = false;\r\n                    item.is_unapproving = false;\r\n                }\r\n            }).catch(function (e) {\r\n                var title = translate('addons.Meerkat::errors.comments_unapprove');\r\n                var genericError = translate('addons.Meerkat::errors.comments_unapprove_desc');\r\n\r\n\r\n                item.is_taking_action = false;\r\n                item.is_unapproving = false;\r\n\r\n                this.raiseError(title, genericError);\r\n            });\r\n        },\r\n\r\n        unApproveMultiple: function () {\r\n            var self = this;\r\n            self.applyingBulkActions = true;\r\n            self.$http.post(self.ajax.unapprove, {ids: self.checkedItems}, function (data) {\r\n                if (data.success) {\r\n                    self.$parent.flashError = false;\r\n                    self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.unapprove_success', data.unapproved.length);\r\n                    _.each(data.unapproved, function (unApprovedId) {\r\n                        var _tItem = _.findWhere(self.items, {id: unApprovedId});\r\n\r\n                        self.changeItemToUnApproved(_tItem);\r\n                        self.metrics.approved--;\r\n                        self.metrics.pending++;\r\n                        self.instanceChanges.commentUnApprovals.push(unApprovedId);\r\n                    });\r\n                    self.refreshCounts();\r\n                    self.refreshView();\r\n                } else {\r\n                    self.$parent.flashSuccess = false;\r\n                    self.$parent.flashError = translate_choice('addons.Meerkat::actions.unapprove_failed', data.unapproved.length) + data.errorMessage;\r\n                }\r\n\r\n                self.applyingBulkActions = false;\r\n            }).catch(function (e) {\r\n                var title = translate('addons.Meerkat::errors.comments_unapprove_plural');\r\n                var genericError = translate('addons.Meerkat::errors.comments_unapprove_desc_plural');\r\n                self.applyBulkActions = false;\r\n\r\n                this.raiseError(title, genericError);\r\n            });\r\n        },\r\n\r\n        markItemAsSpam: function (item) {\r\n            var self = this;\r\n            var id = item.id;\r\n\r\n            swal({\r\n                type: 'warning',\r\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\r\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_spam', 1),\r\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\r\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\r\n                showCancelButton: true\r\n            }, function () {\r\n                item.is_taking_action = true;\r\n                item.is_markingspam = true;\r\n\r\n                self.$http.post(self.ajax.spam, {ids: [id]}, function (data) {\r\n                    if (data.comment_saved) {\r\n                        self.$parent.flashError = false;\r\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.spam_success', data.marked.length);\r\n                        _.each(data.marked, function (markedAsSpam) {\r\n                            var _tItem = _.findWhere(self.items, {id: markedAsSpam});\r\n\r\n                            self.changeItemToIsSpam(_tItem);\r\n                            self.metrics.spam++;\r\n                            self.metrics.approved--;\r\n                            self.instanceChanges.commentMarkedAsSpam.push(markedAsSpam);\r\n                        });\r\n                        self.refreshCounts();\r\n                        item.is_taking_action = false;\r\n                        item.is_markingspam = false;\r\n                        item.spam = true;\r\n\r\n                        if (data.specimen_sent == true && data.submit_success == false) {\r\n                            var sampleErrors = {};\r\n                            var title = translate('addons.Meerkat::errors.comments_mark_spam');\r\n                            var errorMessages = data.errorMessage;\r\n                            errorMessages.unshift(translate('addons.Meerkat::errors.guard_comment_saved_error'));\r\n                            sampleErrors['spam'] = errorMessages;\r\n                            self.raiseError(title, translate('addons.Meerkat::errors.guard_comment_saved_error'), sampleErrors);\r\n                        }\r\n                    } else {\r\n\r\n                        item.is_taking_action = false;\r\n                        item.is_markingspam = false;\r\n                        self.$parent.flashSuccess = false;\r\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.spam_failed', data.marked.length);\r\n\r\n                        if (data.specimen_sent && data.submit_success == false) {\r\n                            var multipleErrors = translate('addons.Meerkat::errors.guard_multiple_spam_submit_errors');\r\n                            var sampleErrors = {};\r\n                            var title = translate('addons.Meerkat::errors.comments_mark_spam');\r\n                            var errorMessages = data.errorMessage;\r\n                            errorMessages.unshift(multipleErrors);\r\n                            sampleErrors['spam'] = errorMessages;\r\n\r\n                            self.raiseError(title, multipleErrors, sampleErrors);\r\n                        } else {\r\n                            item.is_taking_action = false;\r\n                            item.is_markingspam = false;\r\n\r\n                            var title = translate('addons.Meerkat::errors.comments_mark_spam');\r\n                            var genericError = translate('addons.Meerkat::errors.comments_mark_spam_desc');\r\n                            this.raiseError(title, genericError);\r\n                        }\r\n                    }\r\n                }).catch(function (e) {\r\n                    item.is_taking_action = false;\r\n                    item.is_markingspam = false;\r\n\r\n                    var title = translate('addons.Meerkat::errors.comments_mark_spam');\r\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_spam_desc');\r\n                    this.raiseError(title, genericError);\r\n                });\r\n            });\r\n        },\r\n\r\n        markMultipleAsSpam: function () {\r\n            var self = this;\r\n\r\n            swal({\r\n                type: 'warning',\r\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\r\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_spam', 1),\r\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\r\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\r\n                showCancelButton: true\r\n            }, function () {\r\n                self.applyingBulkActions = true;\r\n                self.$http.post(self.ajax.spam, {ids: self.checkedItems}, function (data) {\r\n                    if (data.success) {\r\n                        self.$parent.flashError = false;\r\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.spam_success', data.marked.length);\r\n                        _.each(data.marked, function (markedAsSpam) {\r\n                            self.changeItemToIsSpam(markedAsSpam);\r\n                            self.metrics.spam++;\r\n                            self.metrics.approved--;\r\n                            self.instanceChanges.commentMarkedAsSpam.push(markedAsSpam);\r\n                        });\r\n                        self.refreshCounts();\r\n                        self.refreshView();\r\n                    } else {\r\n                        self.$parent.flashSuccess = false;\r\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.spam_failed', data.marked.length);\r\n                    }\r\n\r\n                    self.applyingBulkActions = false;\r\n                }).catch(function (e) {\r\n                    var title = translate('addons.Meerkat::errors.comments_mark_spam_plural');\r\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_spam_desc_plural');\r\n                    self.applyingBulkActions = false;\r\n\r\n                    this.raiseError(title, genericError);\r\n                });\r\n            });\r\n        },\r\n\r\n        markItemAsNotSpam: function (item) {\r\n            var self = this;\r\n            var id = item.id;\r\n\r\n            swal({\r\n                type: 'warning',\r\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\r\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_not_spam', 1),\r\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\r\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\r\n                showCancelButton: true\r\n            }, function () {\r\n                item.is_taking_action = true;\r\n                item.is_markingnotspam = true;\r\n\r\n                self.$http.post(self.ajax.notspam, {ids: [id]}, function (data) {\r\n                    if (data.comment_saved) {\r\n                        self.$parent.flashError = false;\r\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.not_spam_success', data.marked.length);\r\n                        _.each(data.marked, function (markedAsNotSpam) {\r\n                            self.changeItemToNotSpam(markedAsNotSpam);\r\n                            self.metrics.spam--;\r\n                            self.metrics.approved++;\r\n                            self.instanceChanges.commentMarkedAsNotSpam.push(markedAsNotSpam);\r\n                        });\r\n                        item.is_taking_action = false;\r\n                        item.is_markingnotspam = false;\r\n                        item.spam = false;\r\n                        self.refreshCounts();\r\n\r\n\r\n                        if (data.specimen_sent == true && data.submit_success == false) {\r\n                            var sampleErrors = {};\r\n                            var title = translate('addons.Meerkat::errors.comments_mark_not_spam');\r\n                            var errorMessages = data.errorMessage;\r\n                            errorMessages.unshift(translate('addons.Meerkat::errors.guard_comment_ham_saved_error'));\r\n                            sampleErrors['spam'] = errorMessages;\r\n                            self.raiseError(title, translate('addons.Meerkat::errors.guard_comment_ham_saved_error'), sampleErrors);\r\n                        }\r\n                    } else {\r\n                        self.$parent.flashSuccess = false;\r\n                        item.is_taking_action = false;\r\n                        item.is_markingnotspam = false;\r\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.not_spam_failed', data.marked.length);\r\n\r\n                        if (data.specimen_sent && data.submit_success == false) {\r\n                            var multipleErrors = translate('addons.Meerkat::errors.guard_multiple_ham_submit_errors');\r\n                            var sampleErrors = {};\r\n                            var title = translate('addons.Meerkat::errors.comments_mark_not_spam');\r\n                            var errorMessages = data.errorMessage;\r\n                            errorMessages.unshift(multipleErrors);\r\n                            sampleErrors['spam'] = errorMessages;\r\n\r\n                            self.raiseError(title, multipleErrors, sampleErrors);\r\n                        } else {\r\n                            item.is_taking_action = false;\r\n                            item.is_markingspam = false;\r\n\r\n                            var title = translate('addons.Meerkat::errors.comments_mark_not_spam');\r\n                            var genericError = translate('addons.Meerkat::errors.comments_mark_not_spam_desc');\r\n                            this.raiseError(title, genericError);\r\n                        }\r\n                    }\r\n                }).catch(function (e) {\r\n                    var title = translate('addons.Meerkat::errors.comments_mark_not_spam');\r\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_not_spam_desc');\r\n\r\n                    item.is_taking_action = false;\r\n                    item.is_markingnotspam = false;\r\n\r\n                    this.raiseError(title, genericError);\r\n                });\r\n            });\r\n        },\r\n\r\n        markMultipleAsNotSpam: function () {\r\n            var self = this;\r\n\r\n            swal({\r\n                type: 'warning',\r\n                title: translate('addons.Meerkat::actions.prompt_confirm'),\r\n                text: translate_choice('addons.Meerkat::actions.confirm_mark_as_not_spam', 1),\r\n                confirmButtonText: translate('addons.Meerkat::actions.prompt_confirm_action'),\r\n                cancelButtonText: translate('addons.Meerkat::actions.cancel'),\r\n                showCancelButton: true\r\n            }, function () {\r\n                self.applyingBulkActions = true;\r\n                self.$http.post(self.ajax.notspam, {ids: self.checkedItems}, function (data) {\r\n                    if (data.success) {\r\n                        self.$parent.flashError = false;\r\n                        self.$parent.flashSuccess = translate_choice('addons.Meerkat::actions.not_spam_success', data.marked.length);\r\n                        _.each(data.marked, function (markedAsNotSpam) {\r\n                            self.changeItemToNotSpam(markedAsNotSpam);\r\n                            self.metrics.approved++;\r\n                            self.metrics.spam--;\r\n                            self.instanceChanges.commentMarkedAsNotSpam.push(markedAsNotSpam);\r\n                        });\r\n                        self.refreshCounts();\r\n                        self.refreshView();\r\n                    } else {\r\n                        self.$parent.flashSuccess = false;\r\n                        self.$parent.flashError = translate_choice('addons.Meerkat::actions.not_spam_failed', data.marked.length);\r\n                    }\r\n\r\n                    self.applyingBulkActions = false;\r\n                }).catch(function (e) {\r\n                    var title = translate('addons.Meerkat::errors.comments_mark_not_spam_plural');\r\n                    var genericError = translate('addons.Meerkat::errors.comments_mark_not_spam_desc_plural');\r\n                    self.applyBulkActions = false;\r\n\r\n                    this.raiseError(title, genericError);\r\n                });\r\n            });\r\n        },\r\n\r\n        applyBulkActions: function (action) {\r\n            switch (action) {\r\n                case 'delete':\r\n                    this.deleteMultiple();\r\n                    break;\r\n                case 'approve':\r\n                    this.approveMultiple();\r\n                    break;\r\n                case 'unapprove':\r\n                    this.unApproveMultiple();\r\n                    break;\r\n                case 'spam':\r\n                    this.markMultipleAsSpam();\r\n                    break;\r\n                case 'notspam':\r\n                    this.markMultipleAsNotSpam();\r\n                    break;\r\n            }\r\n        },\r\n\r\n        enableReorder: function () {\r\n            this.reordering = true;\r\n            this.$broadcast('reordering.start');\r\n        },\r\n\r\n        cancelOrder: function () {\r\n            this.reordering = false;\r\n            this.$broadcast('reordering.stop');\r\n        },\r\n\r\n        saveOrder: function () {\r\n            this.saving = true;\r\n            var _vm = this;\r\n\r\n            var order = _.map(this.items, function (item, i) {\r\n                return item.id;\r\n            });\r\n\r\n            this.$http.post(this.ajax.reorder, {ids: order}, function () {\r\n                _vm.saving = false;\r\n                _vm.$broadcast('reordering.saved');\r\n                _vm.loading = true;\r\n                _vm.getItems();\r\n                _vm.reordering = false;\r\n            });\r\n        },\r\n\r\n        addActionPartial: function () {\r\n            this.tableOptions.partials.actions = Meerkat.getMeerkatAddActionPartial();\r\n            this.tableOptions.partials.bulkActions = Meerkat.getBulkActionsTempalte();\r\n            this.tableOptions.partials.avatar = Meerkat.getAvatarTemplate();\r\n        }\r\n    }\r\n\r\n});\r\n","Vue.component('meerkat-conversation-view', {\r\n\r\n    data: function () {\r\n        return {\r\n            isOpen: false,\r\n            rootComment: null\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        isOpen: function (value) {\r\n            if (value) {\r\n                $('body').addClass('meerkat-overflow-hidden');\r\n            } else {\r\n                $('body').removeClass('meerkat-overflow-hidden');\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        open: function (commentId) {\r\n            this.$children[0].streamFor(commentId);\r\n            this.$children[0].setIntendedComment(commentId);\r\n            \r\n            var _vm = this;\r\n            this.$children[0].refreshView(function (items) {\r\n                var rootComment = items.filter(function (item) {\r\n                    return item.id == commentId;\r\n                });\r\n\r\n                if (rootComment.length > 0) {\r\n                    _vm.rootComment = rootComment[0];\r\n                }\r\n            });\r\n            this.$children[0].setSortingOrder('datestamp', 'asc');\r\n            this.$children[0].setIntendedComment(commentId);\r\n            this.isOpen = true;\r\n        },\r\n        close: function () {\r\n            this.isOpen = false;\r\n            if (this.$children[0].parentStateNeedsRefresh()) {\r\n                var streamListing = this.getMainStreamListing();\r\n                if (typeof streamListing !== 'undefined' && streamListing !== null) {\r\n                    streamListing.refreshView();\r\n                }\r\n            }\r\n        },\r\n        getMainStreamListing: function () {\r\n            for (var i = 0; i < this.$parent.$children.length; i++) {\r\n                var child = this.$parent.$children[i];\r\n                if (child instanceof MeerkatStreamListing) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    components: {\r\n        'meerkat-stream-listing': MeerkatStreamListing\r\n    },\r\n\r\n    ready: function () {\r\n        this.$parent.meerkat_ConversationView = this;\r\n        window.cpt = this.$parent;\r\n        this.$children[0].overrideMobile();\r\n    }\r\n\r\n});"]}